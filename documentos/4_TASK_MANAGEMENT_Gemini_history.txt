Como experto en PostgreSQL, a continuación le proporciono la definición completa de los esquemas y las tablas del módulo `TASK_MANAGEMENT`, considerando y resolviendo las dependencias con los esquemas previamente definidos `base_foundation` y `workflows_automation_engine`.

El script se ha diseñado para crear las entidades en el orden adecuado, garantizando que cada tabla dependiente se defina después de que existan las tablas a las que referencia.

-----

### 1\. Consideración de Dependencias Previas

El esquema `task_management` tiene dependencias cruciales en otros módulos:

  * **Esquema `base_foundation`**: Proporciona las tablas `organizations` y `contacts`, que son esenciales para asociar tareas y proyectos a organizaciones y usuarios específicos.
  * **Esquema `workflows_automation_engine`**: Proporciona la tabla `workflow_executions`, que permite vincular las tareas a los flujos de automatización definidos en el sistema.

El siguiente DDL asume que estos esquemas ya han sido creados correctamente.

-----

### 2\. Creación del Esquema `TASK_MANAGEMENT`

El primer paso es crear el nuevo esquema y establecerlo como el camino de búsqueda para simplificar la sintaxis del DDL.

```sql
CREATE SCHEMA IF NOT EXISTS task_management;
SET search_path TO task_management;
```

-----

### 3\. Definición de Tablas del Módulo `TASK_MANAGEMENT`

Las tablas se presentan en el orden de creación necesario para resolver las dependencias de claves foráneas.

#### 3.1. Tablas con Referencias Externas

Estas tablas pueden ser creadas primero, ya que sus claves foráneas solo apuntan a tablas en otros esquemas o a sí mismas.

```sql
-- TABLA: TASK_CATEGORIES
CREATE TABLE task_management.task_categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    color VARCHAR(7),
    icon VARCHAR(50),
    is_system_category BOOLEAN DEFAULT FALSE,
    parent_category_id INTEGER,
    order_sequence INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_task_categories_parent FOREIGN KEY (parent_category_id) REFERENCES task_management.task_categories(id)
);

-- TABLA: PROJECTS
CREATE TABLE task_management.projects (
    id SERIAL PRIMARY KEY,
    organization_id INTEGER NOT NULL,
    project_name VARCHAR(100) NOT NULL,
    description TEXT,
    start_date DATE,
    end_date DATE,
    status VARCHAR(20) DEFAULT 'ACTIVE',
    budget DECIMAL(12, 2),
    actual_cost DECIMAL(12, 2) DEFAULT 0,
    project_manager_contact_id INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(organization_id, project_name),
    CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id),
    CONSTRAINT fk_projects_manager FOREIGN KEY (project_manager_contact_id) REFERENCES base_foundation.contacts(id)
);
```

#### 3.2. Tablas con Dependencias Internas

Estas tablas se crean a continuación, ya que dependen de las tablas `TASK_CATEGORIES` y `PROJECTS`, así como de las tablas externas.

```sql
-- TABLA: TASKS
CREATE TABLE task_management.tasks (
    id SERIAL PRIMARY KEY,
    project_id INTEGER,
    task_name VARCHAR(200) NOT NULL,
    description TEXT,
    task_category_id INTEGER,
    status VARCHAR(20) DEFAULT 'PENDING',
    priority VARCHAR(10) DEFAULT 'NORMAL',
    due_date DATE,
    estimated_duration_hours DECIMAL(6, 2),
    actual_duration_hours DECIMAL(6, 2),
    assigned_to_contact_id INTEGER,
    completed_at TIMESTAMP,
    is_recurring BOOLEAN DEFAULT FALSE,
    recurring_config JSON,
    workflow_execution_id INTEGER,
    is_private BOOLEAN DEFAULT FALSE,
    created_by_contact_id INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_tasks_project FOREIGN KEY (project_id) REFERENCES task_management.projects(id),
    CONSTRAINT fk_tasks_category FOREIGN KEY (task_category_id) REFERENCES task_management.task_categories(id),
    CONSTRAINT fk_tasks_assigned_to FOREIGN KEY (assigned_to_contact_id) REFERENCES base_foundation.contacts(id),
    CONSTRAINT fk_tasks_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id),
    CONSTRAINT fk_tasks_workflow_execution FOREIGN KEY (workflow_execution_id) REFERENCES workflows_automation_engine.workflow_executions(id)
);

-- TABLA: COMMON_TASKS
CREATE TABLE task_management.common_tasks (
    id SERIAL PRIMARY KEY,
    organization_id INTEGER,
    common_task_name VARCHAR(100) NOT NULL,
    description TEXT,
    task_category_id INTEGER,
    priority VARCHAR(10) DEFAULT 'NORMAL',
    estimated_duration_hours DECIMAL(6, 2),
    is_system_template BOOLEAN DEFAULT FALSE,
    created_by_contact_id INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(organization_id, common_task_name),
    CONSTRAINT fk_common_tasks_org FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id),
    CONSTRAINT fk_common_tasks_category FOREIGN KEY (task_category_id) REFERENCES task_management.task_categories(id),
    CONSTRAINT fk_common_tasks_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_LOGS
CREATE TABLE task_management.task_logs (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL,
    log_type VARCHAR(20) NOT NULL,
    log_details TEXT,
    changed_by_contact_id INTEGER,
    old_value TEXT,
    new_value TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_task_logs_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id),
    CONSTRAINT fk_task_logs_contact FOREIGN KEY (changed_by_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_COMMENTS
CREATE TABLE task_management.task_comments (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL,
    comment_text TEXT NOT NULL,
    comment_by_contact_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_task_comments_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id),
    CONSTRAINT fk_task_comments_contact FOREIGN KEY (comment_by_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_ATTACHMENTS
CREATE TABLE task_management.task_attachments (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_type VARCHAR(50),
    file_size_kb INTEGER,
    file_path VARCHAR(255) NOT NULL,
    uploaded_by_contact_id INTEGER,
    uploaded_at TIMESTAMP DEFAULT NOW(),
    is_private BOOLEAN DEFAULT FALSE,
    CONSTRAINT fk_task_attachments_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id),
    CONSTRAINT fk_task_attachments_contact FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_CHECKLISTS
CREATE TABLE task_management.task_checklists (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL,
    checklist_name VARCHAR(100) NOT NULL,
    is_completed BOOLEAN DEFAULT FALSE,
    order_sequence INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(task_id, checklist_name),
    CONSTRAINT fk_task_checklists_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id)
);

-- TABLA: TASK_CHECKLIST_ITEMS
CREATE TABLE task_management.task_checklist_items (
    id SERIAL PRIMARY KEY,
    checklist_id INTEGER NOT NULL,
    item_name VARCHAR(200) NOT NULL,
    is_completed BOOLEAN DEFAULT FALSE,
    order_sequence INTEGER,
    completed_by_contact_id INTEGER,
    completed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_checklist_items_checklist FOREIGN KEY (checklist_id) REFERENCES task_management.task_checklists(id),
    CONSTRAINT fk_checklist_items_contact FOREIGN KEY (completed_by_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_ASSIGNMENTS
CREATE TABLE task_management.task_assignments (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL,
    assigned_to_contact_id INTEGER NOT NULL,
    is_primary_assignee BOOLEAN DEFAULT TRUE,
    is_completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_task_assignments_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id),
    CONSTRAINT fk_task_assignments_contact FOREIGN KEY (assigned_to_contact_id) REFERENCES base_foundation.contacts(id)
);

-- TABLA: TASK_METRICS
CREATE TABLE task_management.task_metrics (
    id SERIAL PRIMARY KEY,
    task_id INTEGER UNIQUE NOT NULL,
    time_to_completion_minutes INTEGER,
    reassignment_count INTEGER DEFAULT 0,
    comment_count INTEGER DEFAULT 0,
    attachment_count INTEGER DEFAULT 0,
    checklist_completion_rate DECIMAL(5, 2),
    created_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_task_metrics_task FOREIGN KEY (task_id) REFERENCES task_management.tasks(id)
);

-- TABLA: TASK_PERFORMANCE_METRICS
CREATE TABLE task_management.task_performance_metrics (
    id SERIAL PRIMARY KEY,
    contact_id INTEGER NOT NULL,
    period_type VARCHAR(10) NOT NULL,
    period_start_date DATE NOT NULL,
    period_end_date DATE NOT NULL,
    tasks_completed INTEGER DEFAULT 0,
    tasks_completed_early INTEGER DEFAULT 0,
    quality_points INTEGER DEFAULT 0,
    collaboration_points INTEGER DEFAULT 0,
    innovation_points INTEGER DEFAULT 0,
    efficiency_points INTEGER DEFAULT 0,
    total_score INTEGER DEFAULT 0,
    rank_in_organization INTEGER,
    achievements_unlocked JSON,
    streak_days INTEGER DEFAULT 0,
    longest_streak INTEGER DEFAULT 0,
    calculated_at TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(contact_id, period_start_date, period_end_date),
    CONSTRAINT fk_task_performance_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id)
);
```
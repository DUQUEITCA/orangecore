-- This script wasTdLLNOT NULL generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS base_foundation.audit_log(id bigserial NOT NULL,
organization_id integer,
entity_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
entity_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
operation_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
created_at timestamp without time zone DEFAULT now(),
changed_by_contact_id integer,
changed_by_user_id integer,
client_ip_address character varying(45) COLLATE pg_catalog."default",
user_agent text COLLATE pg_catalog."default",
old_values jsonb,
new_values jsonb,
changed_fields jsonb,
reason character varying(255) COLLATE pg_catalog."default",
session_id character varying(255) COLLATE pg_catalog."default",
request_id character varying(100) COLLATE pg_catalog."default",
transaction_id character varying(100) COLLATE pg_catalog."default",
severity_level character varying(20) COLLATE pg_catalog."default",
is_sensitive_data boolean DEFAULT false,
compliance_flags jsonb,
retention_until date,
additional_context jsonb,
CONSTRAINT audit_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.avatars(id serial NOT NULL,
contact_id integer NOT NULL,
url character varying(500) COLLATE pg_catalog."default" NOT NULL,
file_name character varying(255) COLLATE pg_catalog."default",
file_size integer,
mime_type character varying(100) COLLATE pg_catalog."default",
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT avatars_pkey PRIMARY KEY (id),
CONSTRAINT avatars_url_key UNIQUE (url)
);

CREATE TABLE IF NOT EXISTS base_foundation.companies(id serial NOT NULL,
contact_id integer NOT NULL,
company_name character varying(200) COLLATE pg_catalog."default",
founded_date date,
tax_id character varying(20) COLLATE pg_catalog."default",
legal_entity_type character varying(50) COLLATE pg_catalog."default",
industry character varying(100) COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT companies_pkey PRIMARY KEY (id),
CONSTRAINT companies_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.contact_organization_roles(id serial NOT NULL,
contact_id integer NOT NULL,
organization_id integer NOT NULL,
role_id integer NOT NULL,
is_active boolean DEFAULT true,
assigned_at timestamp without time zone DEFAULT now(),
assigned_by_contact_id integer,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT contact_organization_roles_pkey PRIMARY KEY (id),
CONSTRAINT contact_organization_roles_contact_id_organization_id_role__key UNIQUE (contact_id, organization_id, role_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.contacts(id serial NOT NULL,
is_company boolean DEFAULT false,
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
last_name character varying(100) COLLATE pg_catalog."default",
full_name character varying(200) COLLATE pg_catalog."default",
lead_status_id integer,
lead_source_id integer,
assigned_salesperson_id integer,
created_at timestamp without time zone DEFAULT now(),
created_by character varying(50) COLLATE pg_catalog."default",
updated_at timestamp without time zone DEFAULT now(),
updated_by character varying(50) COLLATE pg_catalog."default",
CONSTRAINT contacts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.customer_projects(id serial NOT NULL,
organization_id integer NOT NULL,
project_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
project_description text COLLATE pg_catalog."default",
project_status character varying(50) COLLATE pg_catalog."default" NOT NULL,
start_date date,
end_date date,
budget numeric(12, 2),
actual_cost numeric(12, 2),
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT customer_projects_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.emails(id serial NOT NULL,
contact_id integer NOT NULL,
email character varying(100) COLLATE pg_catalog."default" NOT NULL,
is_main boolean DEFAULT false,
is_verified boolean DEFAULT false,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT emails_pkey PRIMARY KEY (id),
CONSTRAINT emails_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_banking_info(id serial NOT NULL,
contact_id integer NOT NULL,
account_type character varying(20) COLLATE pg_catalog."default",
bank_name character varying(100) COLLATE pg_catalog."default",
routing_number character varying(20) COLLATE pg_catalog."default",
account_number character varying(50) COLLATE pg_catalog."default",
account_holder_name character varying(100) COLLATE pg_catalog."default",
is_active boolean DEFAULT true,
verification_status character varying(20) COLLATE pg_catalog."default",
verified_at timestamp without time zone,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT employee_banking_info_pkey PRIMARY KEY (id),
CONSTRAINT employee_banking_info_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_documents(id serial NOT NULL,
contact_id integer NOT NULL,
document_type character varying(50) COLLATE pg_catalog."default",
document_name character varying(255) COLLATE pg_catalog."default",
file_url character varying(500) COLLATE pg_catalog."default",
file_name character varying(255) COLLATE pg_catalog."default",
file_size integer,
mime_type character varying(100) COLLATE pg_catalog."default",
expiration_date date,
is_required boolean DEFAULT false,
approval_status character varying(20) COLLATE pg_catalog."default",
approved_by_contact_id integer,
approved_at timestamp without time zone,
uploaded_by_contact_id integer,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT employee_documents_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_emergency_contacts(id serial NOT NULL,
contact_id integer NOT NULL,
emergency_contact_name character varying(100) COLLATE pg_catalog."default",
relationship character varying(50) COLLATE pg_catalog."default",
phone_primary character varying(20) COLLATE pg_catalog."default",
phone_secondary character varying(20) COLLATE pg_catalog."default",
email character varying(100) COLLATE pg_catalog."default",
address character varying(500) COLLATE pg_catalog."default",
is_primary boolean DEFAULT false,
notes text COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT employee_emergency_contacts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_personal_info(id serial NOT NULL,
contact_id integer NOT NULL,
employee_id character varying(20) COLLATE pg_catalog."default" NOT NULL,
hire_date date,
employment_status character varying(30) COLLATE pg_catalog."default",
employment_type character varying(30) COLLATE pg_catalog."default",
department character varying(100) COLLATE pg_catalog."default",
job_title character varying(100) COLLATE pg_catalog."default",
manager_contact_id integer,
work_location character varying(255) COLLATE pg_catalog."default",
marital_status character varying(20) COLLATE pg_catalog."default",
number_of_dependents integer DEFAULT 0,
veteran_status boolean DEFAULT false,
disability_status character varying(50) COLLATE pg_catalog."default",
preferred_language character varying(30) COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT employee_personal_info_pkey PRIMARY KEY (id),
CONSTRAINT employee_personal_info_contact_id_key UNIQUE (contact_id),
CONSTRAINT employee_personal_info_employee_id_key UNIQUE (employee_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.invoices(id serial NOT NULL,
organization_id integer NOT NULL,
customer_contact_id integer,
customer_project_id integer,
invoice_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
issue_date date NOT NULL,
due_date date,
amount numeric(12, 2) NOT NULL,
status character varying(50) COLLATE pg_catalog."default" NOT NULL,
paid_at timestamp without time zone,
notes text COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT invoices_pkey PRIMARY KEY (id),
CONSTRAINT invoices_invoice_number_key UNIQUE (invoice_number)
);

CREATE TABLE IF NOT EXISTS base_foundation.lead_sources(id serial NOT NULL,
organization_id integer,
source_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
source_category character varying(50) COLLATE pg_catalog."default",
cost_per_lead numeric(8, 2),
conversion_rate numeric(5, 2),
is_active boolean DEFAULT true,
tracking_url character varying(500) COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT lead_sources_pkey PRIMARY KEY (id),
CONSTRAINT lead_sources_organization_id_source_name_key UNIQUE (organization_id, source_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.lead_statuses(id serial NOT NULL,
organization_id integer,
status_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
status_order integer,
status_color character varying(7) COLLATE pg_catalog."default",
is_final_status boolean DEFAULT false,
conversion_probability numeric(5, 2),
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT lead_statuses_pkey PRIMARY KEY (id),
CONSTRAINT lead_statuses_organization_id_status_name_key UNIQUE (organization_id, status_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.organization_integrations(id serial NOT NULL,
organization_id integer NOT NULL,
integration_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
api_key character varying(255) COLLATE pg_catalog."default",
api_secret character varying(255) COLLATE pg_catalog."default",
config_json jsonb,
is_active boolean DEFAULT true,
last_sync_at timestamp without time zone,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT organization_integrations_pkey PRIMARY KEY (id),
CONSTRAINT organization_integrations_organization_id_integration_type_key UNIQUE (organization_id, integration_type)
);

CREATE TABLE IF NOT EXISTS base_foundation.organization_settings(id serial NOT NULL,
organization_id integer NOT NULL,
setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
setting_value text COLLATE pg_catalog."default",
setting_type character varying(50) COLLATE pg_catalog."default",
description text COLLATE pg_catalog."default",
is_encrypted boolean DEFAULT false,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT organization_settings_pkey PRIMARY KEY (id),
CONSTRAINT organization_settings_organization_id_setting_key_key UNIQUE (organization_id, setting_key)
);

CREATE TABLE IF NOT EXISTS base_foundation.organizations(id serial NOT NULL,
parent_id integer,
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
organization_type character varying(50) COLLATE pg_catalog."default",
address_line_1 character varying(255) COLLATE pg_catalog."default",
address_line_2 character varying(255) COLLATE pg_catalog."default",
city character varying(100) COLLATE pg_catalog."default",
state character varying(50) COLLATE pg_catalog."default",
zip_code character varying(20) COLLATE pg_catalog."default",
country character varying(50) COLLATE pg_catalog."default",
phone character varying(20) COLLATE pg_catalog."default",
email character varying(100) COLLATE pg_catalog."default",
website character varying(255) COLLATE pg_catalog."default",
industry character varying(100) COLLATE pg_catalog."default",
tax_id character varying(50) COLLATE pg_catalog."default",
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT organizations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.password_reset_tokens(id serial NOT NULL,
user_id integer NOT NULL,
token character varying(255) COLLATE pg_catalog."default" NOT NULL,
expires_at timestamp without time zone,
used_at timestamp without time zone,
ip_address character varying(45) COLLATE pg_catalog."default",
user_agent text COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (id),
CONSTRAINT password_reset_tokens_token_key UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS base_foundation.payroll_deductions(id serial NOT NULL,
payroll_record_id integer NOT NULL,
deduction_type character varying(50) COLLATE pg_catalog."default",
deduction_name character varying(100) COLLATE pg_catalog."default",
deduction_amount numeric(8, 2),
is_pre_tax boolean DEFAULT false,
employer_contribution numeric(8, 2),
CONSTRAINT payroll_deductions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.payroll_records(id serial NOT NULL,
contact_id integer NOT NULL,
pay_period_start date,
pay_period_end date,
pay_date date,
gross_pay numeric(10, 2),
regular_hours numeric(6, 2),
overtime_hours numeric(6, 2),
regular_rate numeric(8, 2),
overtime_rate numeric(8, 2),
commission_amount numeric(10, 2),
bonus_amount numeric(10, 2),
total_deductions numeric(10, 2),
net_pay numeric(10, 2),
pay_method character varying(20) COLLATE pg_catalog."default",
payroll_batch_id character varying(50) COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT payroll_records_pkey PRIMARY KEY (id),
CONSTRAINT payroll_records_contact_id_pay_period_start_pay_period_end_key UNIQUE (contact_id, pay_period_start, pay_period_end)
);

CREATE TABLE IF NOT EXISTS base_foundation.persons(id serial NOT NULL,
contact_id integer NOT NULL,
gender character varying(30) COLLATE pg_catalog."default",
birth_date date,
tax_id character varying(20) COLLATE pg_catalog."default",
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT persons_pkey PRIMARY KEY (id),
CONSTRAINT persons_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.phones(id serial NOT NULL,
contact_id integer NOT NULL,
country_code character varying(10) COLLATE pg_catalog."default",
phone_number character varying(20) COLLATE pg_catalog."default" NOT NULL,
extension character varying(10) COLLATE pg_catalog."default",
is_main boolean DEFAULT false,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT phones_pkey PRIMARY KEY (id),
CONSTRAINT phones_country_code_phone_number_extension_key UNIQUE (country_code, phone_number, extension)
);

CREATE TABLE IF NOT EXISTS base_foundation.processed_payments(id serial NOT NULL,
organization_id integer NOT NULL,
invoice_id integer,
payment_processor_id character varying(100) COLLATE pg_catalog."default",
amount numeric(12, 2) NOT NULL,
payment_date date NOT NULL,
payment_method character varying(50) COLLATE pg_catalog."default",
status character varying(20) COLLATE pg_catalog."default" NOT NULL,
transaction_fees numeric(8, 2),
net_amount numeric(12, 2),
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT processed_payments_pkey PRIMARY KEY (id),
CONSTRAINT processed_payments_payment_processor_id_key UNIQUE (payment_processor_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.properties(id serial NOT NULL,
place_id character varying(255) COLLATE pg_catalog."default",
address_line_1 character varying(255) COLLATE pg_catalog."default",
address_line_2 character varying(255) COLLATE pg_catalog."default",
city character varying(100) COLLATE pg_catalog."default",
state character varying(50) COLLATE pg_catalog."default",
zip_code character varying(20) COLLATE pg_catalog."default",
country character varying(50) COLLATE pg_catalog."default",
latitude numeric(10, 8),
longitude numeric(11, 8),
property_type character varying(50) COLLATE pg_catalog."default",
year_built integer,
square_footage integer,
lot_size numeric(10, 2),
bedrooms integer,
bathrooms numeric(3, 1),
stories integer,
roof_material character varying(50) COLLATE pg_catalog."default",
roof_age integer,
construction_type character varying(50) COLLATE pg_catalog."default",
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT properties_pkey PRIMARY KEY (id),
CONSTRAINT properties_place_id_key UNIQUE (place_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_batch_data(id serial NOT NULL,
property_id integer NOT NULL,
owner_name character varying(200) COLLATE pg_catalog."default",
owner_mailing_address character varying(500) COLLATE pg_catalog."default",
assessed_value numeric(12, 2),
market_value numeric(12, 2),
tax_amount numeric(10, 2),
deed_date date,
sales_price numeric(12, 2),
sales_date date,
mortgage_amount numeric(12, 2),
mortgage_lender character varying(200) COLLATE pg_catalog."default",
property_use_code character varying(20) COLLATE pg_catalog."default",
last_updated_at timestamp without time zone,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT property_batch_data_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_images(id serial NOT NULL,
property_id integer NOT NULL,
image_url character varying(500) COLLATE pg_catalog."default",
image_type character varying(50) COLLATE pg_catalog."default",
description text COLLATE pg_catalog."default",
taken_at timestamp without time zone,
taken_by_contact_id integer,
file_size integer,
mime_type character varying(100) COLLATE pg_catalog."default",
is_primary boolean DEFAULT false,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT property_images_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_notes(id serial NOT NULL,
property_id integer NOT NULL,
note_text text COLLATE pg_catalog."default",
note_type character varying(50) COLLATE pg_catalog."default",
is_important boolean DEFAULT false,
is_visible_to_customer boolean DEFAULT false,
created_by_contact_id integer,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT property_notes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_visits(id serial NOT NULL,
property_id integer NOT NULL,
contact_id integer NOT NULL,
sales_rep_id integer NOT NULL,
visit_type character varying(50) COLLATE pg_catalog."default",
visit_date timestamp without time zone,
visit_duration_minutes integer,
outcome character varying(50) COLLATE pg_catalog."default",
notes text COLLATE pg_catalog."default",
gps_latitude numeric(10, 8),
gps_longitude numeric(11, 8),
weather_conditions character varying(100) COLLATE pg_catalog."default",
follow_up_date date,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT property_visits_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.role_types(id serial NOT NULL,
role_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
description text COLLATE pg_catalog."default",
permissions_json jsonb,
is_system_role boolean DEFAULT false,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT role_types_pkey PRIMARY KEY (id),
CONSTRAINT role_types_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.roles(id serial NOT NULL,
organization_id integer NOT NULL,
role_type_id integer NOT NULL,
role_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
custom_permissions_json jsonb,
is_active boolean DEFAULT true,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT roles_pkey PRIMARY KEY (id),
CONSTRAINT roles_organization_id_role_name_key UNIQUE (organization_id, role_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.user_sessions(id serial NOT NULL,
user_id integer NOT NULL,
session_token character varying(255) COLLATE pg_catalog."default" NOT NULL,
ip_address character varying(45) COLLATE pg_catalog."default",
user_agent text COLLATE pg_catalog."default",
expires_at timestamp without time zone,
is_active boolean DEFAULT true,
last_activity_at timestamp without time zone,
created_at timestamp without time zone DEFAULT now(),
CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
CONSTRAINT user_sessions_session_token_key UNIQUE (session_token)
);

CREATE TABLE IF NOT EXISTS base_foundation.users(id serial NOT NULL,
contact_id integer NOT NULL,
username character varying(50) COLLATE pg_catalog."default" NOT NULL,
email character varying(100) COLLATE pg_catalog."default" NOT NULL,
password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
is_email_verified boolean DEFAULT false,
is_active boolean DEFAULT true,
last_login_at timestamp without time zone,
failed_login_attempts integer DEFAULT 0,
account_locked_until timestamp without time zone,
created_at timestamp without time zone DEFAULT now(),
updated_at timestamp without time zone DEFAULT now(),
CONSTRAINT users_pkey PRIMARY KEY (id),
CONSTRAINT users_contact_id_key UNIQUE (contact_id),
CONSTRAINT users_email_key UNIQUE (email),
CONSTRAINT users_username_key UNIQUE (username)
);

ALTER TABLE IF EXISTS base_foundation.audit_log
ADD CONSTRAINT fk_audit_log_contact FOREIGN KEY (changed_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.audit_log
ADD CONSTRAINT fk_audit_log_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_audit_log_org
ON base_foundation.audit_log(organization_id);


ALTER TABLE IF EXISTS base_foundation.audit_log
ADD CONSTRAINT fk_audit_log_user FOREIGN KEY (changed_by_user_id)
REFERENCES base_foundation.users (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.avatars
ADD CONSTRAINT fk_avatars_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_avatars_contact
ON base_foundation.avatars(contact_id);


ALTER TABLE IF EXISTS base_foundation.companies
ADD CONSTRAINT fk_companies_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS companies_contact_id_key
ON base_foundation.companies(contact_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
ADD CONSTRAINT fk_contact_org_roles_assigned_by_contact FOREIGN KEY (assigned_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
ADD CONSTRAINT fk_contact_org_roles_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contact_org_roles_contact
ON base_foundation.contact_organization_roles(contact_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
ADD CONSTRAINT fk_contact_org_roles_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contact_org_roles_org
ON base_foundation.contact_organization_roles(organization_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
ADD CONSTRAINT fk_contact_org_roles_role FOREIGN KEY (role_id)
REFERENCES base_foundation.roles (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contacts
ADD CONSTRAINT fk_contacts_assigned_salesperson FOREIGN KEY (assigned_salesperson_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contacts_salesperson
ON base_foundation.contacts(assigned_salesperson_id);


ALTER TABLE IF EXISTS base_foundation.contacts
ADD CONSTRAINT fk_contacts_lead_source FOREIGN KEY (lead_source_id)
REFERENCES base_foundation.lead_sources (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contacts
ADD CONSTRAINT fk_contacts_lead_status FOREIGN KEY (lead_status_id)
REFERENCES base_foundation.lead_statuses (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.customer_projects
ADD CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.emails
ADD CONSTRAINT fk_emails_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_emails_contact
ON base_foundation.emails(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_banking_info
ADD CONSTRAINT fk_banking_info_employee FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS employee_banking_info_contact_id_key
ON base_foundation.employee_banking_info(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_documents
ADD CONSTRAINT fk_employee_docs_approver FOREIGN KEY (approved_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.employee_documents
ADD CONSTRAINT fk_employee_docs_employee FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_employee_docs_employee
ON base_foundation.employee_documents(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_documents
ADD CONSTRAINT fk_employee_docs_uploader FOREIGN KEY (uploaded_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.employee_emergency_contacts
ADD CONSTRAINT fk_emergency_contacts_employee FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_emergency_contacts_employee
ON base_foundation.employee_emergency_contacts(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_personal_info
ADD CONSTRAINT fk_employee_info_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS employee_personal_info_contact_id_key
ON base_foundation.employee_personal_info(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_personal_info
ADD CONSTRAINT fk_employee_info_manager FOREIGN KEY (manager_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_employee_info_manager
ON base_foundation.employee_personal_info(manager_contact_id);


ALTER TABLE IF EXISTS base_foundation.invoices
ADD CONSTRAINT fk_invoices_customer_contact FOREIGN KEY (customer_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.invoices
ADD CONSTRAINT fk_invoices_customer_project FOREIGN KEY (customer_project_id)
REFERENCES base_foundation.customer_projects (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.invoices
ADD CONSTRAINT fk_invoices_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.lead_sources
ADD CONSTRAINT fk_lead_sources_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.lead_statuses
ADD CONSTRAINT fk_lead_statuses_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organization_integrations
ADD CONSTRAINT fk_org_integrations_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organization_settings
ADD CONSTRAINT fk_org_settings_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organizations
ADD CONSTRAINT fk_organizations_parent FOREIGN KEY (parent_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.password_reset_tokens
ADD CONSTRAINT fk_password_reset_tokens_user FOREIGN KEY (user_id)
REFERENCES base_foundation.users (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.payroll_deductions
ADD CONSTRAINT fk_deductions_payroll_record FOREIGN KEY (payroll_record_id)
REFERENCES base_foundation.payroll_records (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.payroll_records
ADD CONSTRAINT fk_payroll_records_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.persons
ADD CONSTRAINT fk_persons_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS persons_contact_id_key
ON base_foundation.persons(contact_id);


ALTER TABLE IF EXISTS base_foundation.phones
ADD CONSTRAINT fk_phones_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_phones_contact
ON base_foundation.phones(contact_id);


ALTER TABLE IF EXISTS base_foundation.processed_payments
ADD CONSTRAINT fk_payments_invoice FOREIGN KEY (invoice_id)
REFERENCES base_foundation.invoices (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.processed_payments
ADD CONSTRAINT fk_payments_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_batch_data
ADD CONSTRAINT fk_property_batch_data_property FOREIGN KEY (property_id)
REFERENCES base_foundation.properties (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_images
ADD CONSTRAINT fk_property_images_contact FOREIGN KEY (taken_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_images
ADD CONSTRAINT fk_property_images_property FOREIGN KEY (property_id)
REFERENCES base_foundation.properties (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_images_property
ON base_foundation.property_images(property_id);


ALTER TABLE IF EXISTS base_foundation.property_notes
ADD CONSTRAINT fk_property_notes_contact FOREIGN KEY (created_by_contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_notes
ADD CONSTRAINT fk_property_notes_property FOREIGN KEY (property_id)
REFERENCES base_foundation.properties (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_notes_property
ON base_foundation.property_notes(property_id);


ALTER TABLE IF EXISTS base_foundation.property_visits
ADD CONSTRAINT fk_property_visits_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_visits
ADD CONSTRAINT fk_property_visits_property FOREIGN KEY (property_id)
REFERENCES base_foundation.properties (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_visits_property
ON base_foundation.property_visits(property_id);


ALTER TABLE IF EXISTS base_foundation.property_visits
ADD CONSTRAINT fk_property_visits_sales_rep FOREIGN KEY (sales_rep_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.roles
ADD CONSTRAINT fk_roles_organization FOREIGN KEY (organization_id)
REFERENCES base_foundation.organizations (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.roles
ADD CONSTRAINT fk_roles_role_type FOREIGN KEY (role_type_id)
REFERENCES base_foundation.role_types (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.user_sessions
ADD CONSTRAINT fk_user_sessions_user FOREIGN KEY (user_id)
REFERENCES base_foundation.users (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.users
ADD CONSTRAINT fk_users_contact FOREIGN KEY (contact_id)
REFERENCES base_foundation.contacts (id) MATCH SIMPLE
ON UPDATE NO ACTION
ON DELETE NO ACTION;

END;


eof


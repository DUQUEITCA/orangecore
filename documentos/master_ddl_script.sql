-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS base_foundation.audit_log
(
    id bigserial NOT NULL,
    organization_id integer,
    entity_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    entity_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    operation_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    changed_by_contact_id integer,
    changed_by_user_id integer,
    client_ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    old_values jsonb,
    new_values jsonb,
    changed_fields jsonb,
    reason character varying(255) COLLATE pg_catalog."default",
    session_id character varying(255) COLLATE pg_catalog."default",
    request_id character varying(100) COLLATE pg_catalog."default",
    transaction_id character varying(100) COLLATE pg_catalog."default",
    severity_level character varying(20) COLLATE pg_catalog."default",
    is_sensitive_data boolean DEFAULT false,
    compliance_flags jsonb,
    retention_until date,
    additional_context jsonb,
    CONSTRAINT audit_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.avatars
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    url character varying(500) COLLATE pg_catalog."default" NOT NULL,
    file_name character varying(255) COLLATE pg_catalog."default",
    file_size integer,
    mime_type character varying(100) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT avatars_pkey PRIMARY KEY (id),
    CONSTRAINT avatars_url_key UNIQUE (url)
);

CREATE TABLE IF NOT EXISTS base_foundation.companies
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    company_name character varying(200) COLLATE pg_catalog."default",
    founded_date date,
    tax_id character varying(20) COLLATE pg_catalog."default",
    legal_entity_type character varying(50) COLLATE pg_catalog."default",
    industry character varying(100) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT companies_pkey PRIMARY KEY (id),
    CONSTRAINT companies_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.contact_organization_roles
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    organization_id integer NOT NULL,
    role_id integer NOT NULL,
    is_active boolean DEFAULT true,
    assigned_at timestamp without time zone DEFAULT now(),
    assigned_by_contact_id integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT contact_organization_roles_pkey PRIMARY KEY (id),
    CONSTRAINT contact_organization_roles_contact_id_organization_id_role__key UNIQUE (contact_id, organization_id, role_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.contacts
(
    id serial NOT NULL,
    is_company boolean DEFAULT false,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default",
    full_name character varying(200) COLLATE pg_catalog."default",
    lead_status_id integer,
    lead_source_id integer,
    assigned_salesperson_id integer,
    created_at timestamp without time zone DEFAULT now(),
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_at timestamp without time zone DEFAULT now(),
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT contacts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.customer_projects
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    project_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    project_description text COLLATE pg_catalog."default",
    project_status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    start_date date,
    end_date date,
    budget numeric(12, 2),
    actual_cost numeric(12, 2),
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT customer_projects_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.emails
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_main boolean DEFAULT false,
    is_verified boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT emails_pkey PRIMARY KEY (id),
    CONSTRAINT emails_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_banking_info
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    account_type character varying(20) COLLATE pg_catalog."default",
    bank_name character varying(100) COLLATE pg_catalog."default",
    routing_number character varying(20) COLLATE pg_catalog."default",
    account_number character varying(50) COLLATE pg_catalog."default",
    account_holder_name character varying(100) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    verification_status character varying(20) COLLATE pg_catalog."default",
    verified_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT employee_banking_info_pkey PRIMARY KEY (id),
    CONSTRAINT employee_banking_info_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_documents
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    document_type character varying(50) COLLATE pg_catalog."default",
    document_name character varying(255) COLLATE pg_catalog."default",
    file_url character varying(500) COLLATE pg_catalog."default",
    file_name character varying(255) COLLATE pg_catalog."default",
    file_size integer,
    mime_type character varying(100) COLLATE pg_catalog."default",
    expiration_date date,
    is_required boolean DEFAULT false,
    approval_status character varying(20) COLLATE pg_catalog."default",
    approved_by_contact_id integer,
    approved_at timestamp without time zone,
    uploaded_by_contact_id integer,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT employee_documents_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_emergency_contacts
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    emergency_contact_name character varying(100) COLLATE pg_catalog."default",
    relationship character varying(50) COLLATE pg_catalog."default",
    phone_primary character varying(20) COLLATE pg_catalog."default",
    phone_secondary character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    address character varying(500) COLLATE pg_catalog."default",
    is_primary boolean DEFAULT false,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT employee_emergency_contacts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.employee_personal_info
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    employee_id character varying(20) COLLATE pg_catalog."default" NOT NULL,
    hire_date date,
    employment_status character varying(30) COLLATE pg_catalog."default",
    employment_type character varying(30) COLLATE pg_catalog."default",
    department character varying(100) COLLATE pg_catalog."default",
    job_title character varying(100) COLLATE pg_catalog."default",
    manager_contact_id integer,
    work_location character varying(255) COLLATE pg_catalog."default",
    marital_status character varying(20) COLLATE pg_catalog."default",
    number_of_dependents integer DEFAULT 0,
    veteran_status boolean DEFAULT false,
    disability_status character varying(50) COLLATE pg_catalog."default",
    preferred_language character varying(30) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT employee_personal_info_pkey PRIMARY KEY (id),
    CONSTRAINT employee_personal_info_contact_id_key UNIQUE (contact_id),
    CONSTRAINT employee_personal_info_employee_id_key UNIQUE (employee_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.invoices
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    customer_contact_id integer,
    customer_project_id integer,
    invoice_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    issue_date date NOT NULL,
    due_date date,
    amount numeric(12, 2) NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    paid_at timestamp without time zone,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT invoices_pkey PRIMARY KEY (id),
    CONSTRAINT invoices_invoice_number_key UNIQUE (invoice_number)
);

CREATE TABLE IF NOT EXISTS base_foundation.lead_sources
(
    id serial NOT NULL,
    organization_id integer,
    source_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    source_category character varying(50) COLLATE pg_catalog."default",
    cost_per_lead numeric(8, 2),
    conversion_rate numeric(5, 2),
    is_active boolean DEFAULT true,
    tracking_url character varying(500) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT lead_sources_pkey PRIMARY KEY (id),
    CONSTRAINT lead_sources_organization_id_source_name_key UNIQUE (organization_id, source_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.lead_statuses
(
    id serial NOT NULL,
    organization_id integer,
    status_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status_order integer,
    status_color character varying(7) COLLATE pg_catalog."default",
    is_final_status boolean DEFAULT false,
    conversion_probability numeric(5, 2),
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT lead_statuses_pkey PRIMARY KEY (id),
    CONSTRAINT lead_statuses_organization_id_status_name_key UNIQUE (organization_id, status_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.organization_integrations
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    integration_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    api_key character varying(255) COLLATE pg_catalog."default",
    api_secret character varying(255) COLLATE pg_catalog."default",
    config_json jsonb,
    is_active boolean DEFAULT true,
    last_sync_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT organization_integrations_pkey PRIMARY KEY (id),
    CONSTRAINT organization_integrations_organization_id_integration_type_key UNIQUE (organization_id, integration_type)
);

CREATE TABLE IF NOT EXISTS base_foundation.organization_settings
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    setting_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_encrypted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT organization_settings_pkey PRIMARY KEY (id),
    CONSTRAINT organization_settings_organization_id_setting_key_key UNIQUE (organization_id, setting_key)
);

CREATE TABLE IF NOT EXISTS base_foundation.organizations
(
    id serial NOT NULL,
    parent_id integer,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    organization_type character varying(50) COLLATE pg_catalog."default",
    address_line_1 character varying(255) COLLATE pg_catalog."default",
    address_line_2 character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state character varying(50) COLLATE pg_catalog."default",
    zip_code character varying(20) COLLATE pg_catalog."default",
    country character varying(50) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    industry character varying(100) COLLATE pg_catalog."default",
    tax_id character varying(50) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT organizations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.password_reset_tokens
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expires_at timestamp without time zone,
    used_at timestamp without time zone,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (id),
    CONSTRAINT password_reset_tokens_token_key UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS base_foundation.payroll_deductions
(
    id serial NOT NULL,
    payroll_record_id integer NOT NULL,
    deduction_type character varying(50) COLLATE pg_catalog."default",
    deduction_name character varying(100) COLLATE pg_catalog."default",
    deduction_amount numeric(8, 2),
    is_pre_tax boolean DEFAULT false,
    employer_contribution numeric(8, 2),
    CONSTRAINT payroll_deductions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.payroll_records
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    pay_period_start date,
    pay_period_end date,
    pay_date date,
    gross_pay numeric(10, 2),
    regular_hours numeric(6, 2),
    overtime_hours numeric(6, 2),
    regular_rate numeric(8, 2),
    overtime_rate numeric(8, 2),
    commission_amount numeric(10, 2),
    bonus_amount numeric(10, 2),
    total_deductions numeric(10, 2),
    net_pay numeric(10, 2),
    pay_method character varying(20) COLLATE pg_catalog."default",
    payroll_batch_id character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT payroll_records_pkey PRIMARY KEY (id),
    CONSTRAINT payroll_records_contact_id_pay_period_start_pay_period_end_key UNIQUE (contact_id, pay_period_start, pay_period_end)
);

CREATE TABLE IF NOT EXISTS base_foundation.persons
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    gender character varying(30) COLLATE pg_catalog."default",
    birth_date date,
    tax_id character varying(20) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT persons_pkey PRIMARY KEY (id),
    CONSTRAINT persons_contact_id_key UNIQUE (contact_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.phones
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    country_code character varying(10) COLLATE pg_catalog."default",
    phone_number character varying(20) COLLATE pg_catalog."default" NOT NULL,
    extension character varying(10) COLLATE pg_catalog."default",
    is_main boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT phones_pkey PRIMARY KEY (id),
    CONSTRAINT phones_country_code_phone_number_extension_key UNIQUE (country_code, phone_number, extension)
);

CREATE TABLE IF NOT EXISTS base_foundation.processed_payments
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    invoice_id integer,
    payment_processor_id character varying(100) COLLATE pg_catalog."default",
    amount numeric(12, 2) NOT NULL,
    payment_date date NOT NULL,
    payment_method character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    transaction_fees numeric(8, 2),
    net_amount numeric(12, 2),
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT processed_payments_pkey PRIMARY KEY (id),
    CONSTRAINT processed_payments_payment_processor_id_key UNIQUE (payment_processor_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.properties
(
    id serial NOT NULL,
    place_id character varying(255) COLLATE pg_catalog."default",
    address_line_1 character varying(255) COLLATE pg_catalog."default",
    address_line_2 character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state character varying(50) COLLATE pg_catalog."default",
    zip_code character varying(20) COLLATE pg_catalog."default",
    country character varying(50) COLLATE pg_catalog."default",
    latitude numeric(10, 8),
    longitude numeric(11, 8),
    property_type character varying(50) COLLATE pg_catalog."default",
    year_built integer,
    square_footage integer,
    lot_size numeric(10, 2),
    bedrooms integer,
    bathrooms numeric(3, 1),
    stories integer,
    roof_material character varying(50) COLLATE pg_catalog."default",
    roof_age integer,
    construction_type character varying(50) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT properties_pkey PRIMARY KEY (id),
    CONSTRAINT properties_place_id_key UNIQUE (place_id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_batch_data
(
    id serial NOT NULL,
    property_id integer NOT NULL,
    owner_name character varying(200) COLLATE pg_catalog."default",
    owner_mailing_address character varying(500) COLLATE pg_catalog."default",
    assessed_value numeric(12, 2),
    market_value numeric(12, 2),
    tax_amount numeric(10, 2),
    deed_date date,
    sales_price numeric(12, 2),
    sales_date date,
    mortgage_amount numeric(12, 2),
    mortgage_lender character varying(200) COLLATE pg_catalog."default",
    property_use_code character varying(20) COLLATE pg_catalog."default",
    last_updated_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT property_batch_data_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_images
(
    id serial NOT NULL,
    property_id integer NOT NULL,
    image_url character varying(500) COLLATE pg_catalog."default",
    image_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    taken_at timestamp without time zone,
    taken_by_contact_id integer,
    file_size integer,
    mime_type character varying(100) COLLATE pg_catalog."default",
    is_primary boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT property_images_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_notes
(
    id serial NOT NULL,
    property_id integer NOT TdLL,
    note_text text COLLATE pg_catalog."default",
    note_type character varying(50) COLLATE pg_catalog."default",
    is_important boolean DEFAULT false,
    is_visible_to_customer boolean DEFAULT false,
    created_by_contact_id integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT property_notes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.property_visits
(
    id serial NOT NULL,
    property_id integer NOT NULL,
    contact_id integer NOT NULL,
    sales_rep_id integer NOT NULL,
    visit_type character varying(50) COLLATE pg_catalog."default",
    visit_date timestamp without time zone,
    visit_duration_minutes integer,
    outcome character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    gps_latitude numeric(10, 8),
    gps_longitude numeric(11, 8),
    weather_conditions character varying(100) COLLATE pg_catalog."default",
    follow_up_date date,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT property_visits_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS base_foundation.role_types
(
    id serial NOT NULL,
    role_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    permissions_json jsonb,
    is_system_role boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT role_types_pkey PRIMARY KEY (id),
    CONSTRAINT role_types_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.roles
(
    id serial NOT NULL,
    organization_id integer NOT NULL,
    role_type_id integer NOT NULL,
    role_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    custom_permissions_json jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_organization_id_role_name_key UNIQUE (organization_id, role_name)
);

CREATE TABLE IF NOT EXISTS base_foundation.user_sessions
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    session_token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    expires_at timestamp without time zone,
    is_active boolean DEFAULT true,
    last_activity_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
    CONSTRAINT user_sessions_session_token_key UNIQUE (session_token)
);

CREATE TABLE IF NOT EXISTS base_foundation.users
(
    id serial NOT NULL,
    contact_id integer NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    is_email_verified boolean DEFAULT false,
    is_active boolean DEFAULT true,
    last_login_at timestamp without time zone,
    failed_login_attempts integer DEFAULT 0,
    account_locked_until timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_contact_id_key UNIQUE (contact_id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

ALTER TABLE IF EXISTS base_foundation.audit_log
    ADD CONSTRAINT fk_audit_log_contact FOREIGN KEY (changed_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.audit_log
    ADD CONSTRAINT fk_audit_log_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_audit_log_org
    ON base_foundation.audit_log(organization_id);


ALTER TABLE IF EXISTS base_foundation.audit_log
    ADD CONSTRAINT fk_audit_log_user FOREIGN KEY (changed_by_user_id)
    REFERENCES base_foundation.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.avatars
    ADD CONSTRAINT fk_avatars_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_avatars_contact
    ON base_foundation.avatars(contact_id);


ALTER TABLE IF EXISTS base_foundation.companies
    ADD CONSTRAINT fk_companies_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS companies_contact_id_key
    ON base_foundation.companies(contact_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
    ADD CONSTRAINT fk_contact_org_roles_assigned_by_contact FOREIGN KEY (assigned_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
    ADD CONSTRAINT fk_contact_org_roles_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contact_org_roles_contact
    ON base_foundation.contact_organization_roles(contact_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
    ADD CONSTRAINT fk_contact_org_roles_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contact_org_roles_org
    ON base_foundation.contact_organization_roles(organization_id);


ALTER TABLE IF EXISTS base_foundation.contact_organization_roles
    ADD CONSTRAINT fk_contact_org_roles_role FOREIGN KEY (role_id)
    REFERENCES base_foundation.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contacts
    ADD CONSTRAINT fk_contacts_assigned_salesperson FOREIGN KEY (assigned_salesperson_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_contacts_salesperson
    ON base_foundation.contacts(assigned_salesperson_id);


ALTER TABLE IF EXISTS base_foundation.contacts
    ADD CONSTRAINT fk_contacts_lead_source FOREIGN KEY (lead_source_id)
    REFERENCES base_foundation.lead_sources (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.contacts
    ADD CONSTRAINT fk_contacts_lead_status FOREIGN KEY (lead_status_id)
    REFERENCES base_foundation.lead_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.customer_projects
    ADD CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.emails
    ADD CONSTRAINT fk_emails_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_emails_contact
    ON base_foundation.emails(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_banking_info
    ADD CONSTRAINT fk_banking_info_employee FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS employee_banking_info_contact_id_key
    ON base_foundation.employee_banking_info(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_documents
    ADD CONSTRAINT fk_employee_docs_approver FOREIGN KEY (approved_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.employee_documents
    ADD CONSTRAINT fk_employee_docs_employee FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_employee_docs_employee
    ON base_foundation.employee_documents(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_documents
    ADD CONSTRAINT fk_employee_docs_uploader FOREIGN KEY (uploaded_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.employee_emergency_contacts
    ADD CONSTRAINT fk_emergency_contacts_employee FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_emergency_contacts_employee
    ON base_foundation.employee_emergency_contacts(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_personal_info
    ADD CONSTRAINT fk_employee_info_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS employee_personal_info_contact_id_key
    ON base_foundation.employee_personal_info(contact_id);


ALTER TABLE IF EXISTS base_foundation.employee_personal_info
    ADD CONSTRAINT fk_employee_info_manager FOREIGN KEY (manager_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_employee_info_manager
    ON base_foundation.employee_personal_info(manager_contact_id);


ALTER TABLE IF EXISTS base_foundation.invoices
    ADD CONSTRAINT fk_invoices_customer_contact FOREIGN KEY (customer_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.invoices
    ADD CONSTRAINT fk_invoices_customer_project FOREIGN KEY (customer_project_id)
    REFERENCES base_foundation.customer_projects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.invoices
    ADD CONSTRAINT fk_invoices_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.lead_sources
    ADD CONSTRAINT fk_lead_sources_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.lead_statuses
    ADD CONSTRAINT fk_lead_statuses_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organization_integrations
    ADD CONSTRAINT fk_org_integrations_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organization_settings
    ADD CONSTRAINT fk_org_settings_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.organizations
    ADD CONSTRAINT fk_organizations_parent FOREIGN KEY (parent_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.password_reset_tokens
    ADD CONSTRAINT fk_password_reset_tokens_user FOREIGN KEY (user_id)
    REFERENCES base_foundation.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.payroll_deductions
    ADD CONSTRAINT fk_deductions_payroll_record FOREIGN KEY (payroll_record_id)
    REFERENCES base_foundation.payroll_records (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.payroll_records
    ADD CONSTRAINT fk_payroll_records_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.persons
    ADD CONSTRAINT fk_persons_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS persons_contact_id_key
    ON base_foundation.persons(contact_id);


ALTER TABLE IF EXISTS base_foundation.phones
    ADD CONSTRAINT fk_phones_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_phones_contact
    ON base_foundation.phones(contact_id);


ALTER TABLE IF EXISTS base_foundation.processed_payments
    ADD CONSTRAINT fk_payments_invoice FOREIGN KEY (invoice_id)
    REFERENCES base_foundation.invoices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.processed_payments
    ADD CONSTRAINT fk_payments_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_batch_data
    ADD CONSTRAINT fk_property_batch_data_property FOREIGN KEY (property_id)
    REFERENCES base_foundation.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_images
    ADD CONSTRAINT fk_property_images_contact FOREIGN KEY (taken_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_images
    ADD CONSTRAINT fk_property_images_property FOREIGN KEY (property_id)
    REFERENCES base_foundation.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_images_property
    ON base_foundation.property_images(property_id);


ALTER TABLE IF EXISTS base_foundation.property_notes
    ADD CONSTRAINT fk_property_notes_contact FOREIGN KEY (created_by_contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_notes
    ADD CONSTRAINT fk_property_notes_property FOREIGN KEY (property_id)
    REFERENCES base_foundation.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_notes_property
    ON base_foundation.property_notes(property_id);


ALTER TABLE IF EXISTS base_foundation.property_visits
    ADD CONSTRAINT fk_property_visits_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.property_visits
    ADD CONSTRAINT fk_property_visits_property FOREIGN KEY (property_id)
    REFERENCES base_foundation.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_property_visits_property
    ON base_foundation.property_visits(property_id);


ALTER TABLE IF EXISTS base_foundation.property_visits
    ADD CONSTRAINT fk_property_visits_sales_rep FOREIGN KEY (sales_rep_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.roles
    ADD CONSTRAINT fk_roles_organization FOREIGN KEY (organization_id)
    REFERENCES base_foundation.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.roles
    ADD CONSTRAINT fk_roles_role_type FOREIGN KEY (role_type_id)
    REFERENCES base_foundation.role_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.user_sessions
    ADD CONSTRAINT fk_user_sessions_user FOREIGN KEY (user_id)
    REFERENCES base_foundation.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS base_foundation.users
    ADD CONSTRAINT fk_users_contact FOREIGN KEY (contact_id)
    REFERENCES base_foundation.contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;


-- SEPARADOR DE ESQUEMAS --

¡Claro\! He procesado el archivo `2_WORKFLOWS_AUTOMATION_ENGINE.txt` y he creado el script DDL (Data Definition Language) de PostgreSQL para el esquema **`workflows_automation_engine`**. Este script se ha diseñado para crear todas las tablas, relaciones y restricciones tal como se especifican en tu documentación.

### Descripción de la Lógica de Creación

Para asegurar un orden de creación correcto y evitar problemas de dependencias entre tablas, el script está estructurado en tres partes:

1.  **Creación del Esquema y Tablas Sin Claves Foráneas:** Se crea el esquema `workflows_automation_engine` y todas las tablas con sus campos y claves primarias, pero sin definir las relaciones de clave foránea. Esto garantiza que todas las tablas existan antes de que se establezcan sus vínculos.

2.  [cite\_start]**Definición de Claves Foráneas:** A través de sentencias `ALTER TABLE`, se añaden todas las claves foráneas necesarias para establecer las relaciones correctas entre las tablas, como `WORKFLOW_DEFINITIONS` que se relaciona con `ORGANIZATIONS` y `CONTACTS`[cite: 439, 440, 441].

3.  [cite\_start]**Creación de Índices:** Se crean los índices sugeridos en el documento para optimizar el rendimiento de las consultas y búsquedas más comunes, como los índices en `organization_id` y `is_active` para la tabla `WORKFLOW_DEFINITIONS`[cite: 441].

-----

### Script de PostgreSQL

```sql
-- PARTE 1: Creación del esquema y tablas con PKs y restricciones de columna
-- ==================================================================================================================================================================

-- Creamos el esquema si aún no existe
CREATE SCHEMA IF NOT EXISTS workflows_automation_engine;

-- Establecemos el path de búsqueda para no tener que prefijar cada tabla
SET search_path TO workflows_automation_engine;

-- TABLA 76: WORKFLOW_DEFINITIONS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_definitions (
    id SERIAL PRIMARY KEY,
    organization_id INTEGER,
    workflow_name VARCHAR(100) NOT NULL,
    workflow_description TEXT,
    workflow_category VARCHAR(50),
    trigger_type VARCHAR(30),
    trigger_config JSON,
    is_active BOOLEAN DEFAULT TRUE,
    is_system_workflow BOOLEAN DEFAULT FALSE,
    execution_priority INTEGER,
    max_concurrent_executions INTEGER,
    timeout_minutes INTEGER,
    created_by_contact_id INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(organization_id, workflow_name)
);

-- TABLA 77: WORKFLOW_STEPS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_steps (
    id SERIAL PRIMARY KEY,
    workflow_definition_id INTEGER NOT NULL,
    step_name VARCHAR(100),
    step_order INTEGER,
    step_type VARCHAR(50),
    step_config JSON,
    parent_step_id INTEGER,
    condition_expression TEXT,
    ai_model_id INTEGER,
    retry_strategy VARCHAR(30),
    max_retries INTEGER DEFAULT 3,
    timeout_minutes INTEGER,
    is_parallel BOOLEAN DEFAULT FALSE,
    success_criteria JSON,
    failure_handling VARCHAR(30),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(workflow_definition_id, step_order)
);

-- TABLA 78: WORKFLOW_EXECUTIONS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_executions (
    id SERIAL PRIMARY KEY,
    workflow_definition_id INTEGER NOT NULL,
    execution_key VARCHAR(100),
    context_table VARCHAR(50),
    context_id INTEGER,
    triggered_by VARCHAR(30),
    triggered_by_contact_id INTEGER,
    execution_status VARCHAR(30),
    current_step_id INTEGER,
    execution_data JSON,
    ai_optimization_applied BOOLEAN DEFAULT FALSE,
    performance_metrics JSON,
    error_details JSON,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    estimated_completion_at TIMESTAMP,
    total_duration_minutes DECIMAL(8,2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(execution_key)
);

-- TABLA 79: WORKFLOW_VARIABLES
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_variables (
    id SERIAL PRIMARY KEY,
    workflow_execution_id INTEGER NOT NULL,
    variable_name VARCHAR(100),
    variable_type VARCHAR(20),
    variable_value TEXT,
    variable_scope VARCHAR(20),
    is_input BOOLEAN DEFAULT FALSE,
    is_output BOOLEAN DEFAULT FALSE,
    is_ai_generated BOOLEAN DEFAULT FALSE,
    ai_confidence_score DECIMAL(5,2),
    source_step_id INTEGER,
    encryption_required BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(workflow_execution_id, variable_name)
);

-- TABLA 80: WORKFLOW_SCHEDULES
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_schedules (
    id SERIAL PRIMARY KEY,
    workflow_definition_id INTEGER NOT NULL,
    schedule_name VARCHAR(100),
    schedule_type VARCHAR(20),
    cron_expression VARCHAR(100),
    interval_minutes INTEGER,
    ai_optimization_enabled BOOLEAN DEFAULT FALSE,
    optimal_execution_times JSON,
    timezone VARCHAR(50),
    is_active BOOLEAN DEFAULT TRUE,
    next_execution_at TIMESTAMP,
    last_execution_at TIMESTAMP,
    total_scheduled_executions INTEGER DEFAULT 0,
    max_executions INTEGER,
    performance_metrics JSON,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 81: WORKFLOW_TEMPLATES
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.workflow_templates (
    id SERIAL PRIMARY KEY,
    organization_id INTEGER,
    template_name VARCHAR(100),
    template_category VARCHAR(50),
    template_description TEXT,
    industry_specific BOOLEAN DEFAULT FALSE,
    template_config JSON,
    usage_count INTEGER DEFAULT 0,
    success_rate DECIMAL(5,2),
    ai_recommendation_score DECIMAL(5,2),
    customization_complexity VARCHAR(20),
    estimated_setup_time_minutes INTEGER,
    estimated_roi_percentage DECIMAL(5,2),
    created_by_contact_id INTEGER,
    is_public BOOLEAN DEFAULT FALSE,
    rating_average DECIMAL(3,2),
    total_ratings INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 82: BUSINESS_RULES
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.business_rules (
    id SERIAL PRIMARY KEY,
    organization_id INTEGER NOT NULL,
    rule_name VARCHAR(100) NOT NULL,
    rule_category VARCHAR(50),
    rule_type VARCHAR(30),
    rule_expression TEXT,
    ai_enhanced BOOLEAN DEFAULT FALSE,
    rule_priority INTEGER,
    applies_to_table VARCHAR(50),
    applies_to_conditions JSON,
    action_on_true VARCHAR(100),
    action_on_false VARCHAR(100),
    related_workflow_id INTEGER,
    success_rate DECIMAL(5,2),
    false_positive_rate DECIMAL(5,2),
    is_active BOOLEAN DEFAULT TRUE,
    created_by_contact_id INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(organization_id, rule_name)
);

-- TABLA 83: RULE_CONDITIONS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.rule_conditions (
    id SERIAL PRIMARY KEY,
    business_rule_id INTEGER NOT NULL,
    condition_order INTEGER,
    condition_type VARCHAR(30),
    field_name VARCHAR(50),
    operator VARCHAR(20),
    expected_value VARCHAR(255),
    ai_model_id INTEGER,
    weight DECIMAL(5,2),
    logical_operator VARCHAR(10),
    external_api_config JSON,
    calculation_formula TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 84: RULE_EXECUTIONS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.rule_executions (
    id SERIAL PRIMARY KEY,
    business_rule_id INTEGER NOT NULL,
    context_table VARCHAR(50),
    context_id INTEGER,
    rule_result BOOLEAN,
    ai_confidence_score DECIMAL(5,2),
    execution_details JSON,
    action_taken VARCHAR(100),
    execution_time_ms DECIMAL(8,2),
    ai_override_applied BOOLEAN DEFAULT FALSE,
    human_feedback VARCHAR(20),
    error_message TEXT,
    workflow_execution_id INTEGER,
    executed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 85: RULE_ACTIONS
-- Módulo: WORKFLOWS & AUTOMATION ENGINE + AI
CREATE TABLE workflows_automation_engine.rule_actions (
    id SERIAL PRIMARY KEY,
    business_rule_id INTEGER NOT NULL,
    action_order INTEGER,
    action_type VARCHAR(50),
    action_config JSON,
    ai_optimized_parameters JSON,
    success_rate DECIMAL(5,2),
    conditions_for_execution JSON,
    retry_on_failure BOOLEAN DEFAULT FALSE,
    max_retries INTEGER DEFAULT 0,
    is_async BOOLEAN DEFAULT FALSE,
    timeout_seconds INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- PARTE 2: Definición de Claves Foráneas
-- ==================================================================================================================================================================

-- FKs para WORKFLOW_DEFINITIONS
ALTER TABLE workflows_automation_engine.workflow_definitions
ADD CONSTRAINT fk_workflow_definitions_organization
FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

ALTER TABLE workflows_automation_engine.workflow_definitions
ADD CONSTRAINT fk_workflow_definitions_created_by_contact
FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- FKs para WORKFLOW_STEPS
ALTER TABLE workflows_automation_engine.workflow_steps
ADD CONSTRAINT fk_workflow_steps_definition
FOREIGN KEY (workflow_definition_id) REFERENCES workflows_automation_engine.workflow_definitions(id);

ALTER TABLE workflows_automation_engine.workflow_steps
ADD CONSTRAINT fk_workflow_steps_parent_step
FOREIGN KEY (parent_step_id) REFERENCES workflows_automation_engine.workflow_steps(id);

-- FKs para WORKFLOW_EXECUTIONS
ALTER TABLE workflows_automation_engine.workflow_executions
ADD CONSTRAINT fk_workflow_executions_definition
FOREIGN KEY (workflow_definition_id) REFERENCES workflows_automation_engine.workflow_definitions(id);

ALTER TABLE workflows_automation_engine.workflow_executions
ADD CONSTRAINT fk_workflow_executions_triggered_by_contact
FOREIGN KEY (triggered_by_contact_id) REFERENCES base_foundation.contacts(id);

ALTER TABLE workflows_automation_engine.workflow_executions
ADD CONSTRAINT fk_workflow_executions_current_step
FOREIGN KEY (current_step_id) REFERENCES workflows_automation_engine.workflow_steps(id);

-- FKs para WORKFLOW_VARIABLES
ALTER TABLE workflows_automation_engine.workflow_variables
ADD CONSTRAINT fk_workflow_variables_execution
FOREIGN KEY (workflow_execution_id) REFERENCES workflows_automation_engine.workflow_executions(id);

ALTER TABLE workflows_automation_engine.workflow_variables
ADD CONSTRAINT fk_workflow_variables_source_step
FOREIGN KEY (source_step_id) REFERENCES workflows_automation_engine.workflow_steps(id);

-- FKs para WORKFLOW_SCHEDULES
ALTER TABLE workflows_automation_engine.workflow_schedules
ADD CONSTRAINT fk_workflow_schedules_definition
FOREIGN KEY (workflow_definition_id) REFERENCES workflows_automation_engine.workflow_definitions(id);

-- FKs para WORKFLOW_TEMPLATES
ALTER TABLE workflows_automation_engine.workflow_templates
ADD CONSTRAINT fk_workflow_templates_organization
FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

ALTER TABLE workflows_automation_engine.workflow_templates
ADD CONSTRAINT fk_workflow_templates_created_by_contact
FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- FKs para BUSINESS_RULES
ALTER TABLE workflows_automation_engine.business_rules
ADD CONSTRAINT fk_business_rules_organization
FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

ALTER TABLE workflows_automation_engine.business_rules
ADD CONSTRAINT fk_business_rules_related_workflow
FOREIGN KEY (related_workflow_id) REFERENCES workflows_automation_engine.workflow_definitions(id);

ALTER TABLE workflows_automation_engine.business_rules
ADD CONSTRAINT fk_business_rules_created_by_contact
FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- FKs para RULE_CONDITIONS
ALTER TABLE workflows_automation_engine.rule_conditions
ADD CONSTRAINT fk_rule_conditions_business_rule
FOREIGN KEY (business_rule_id) REFERENCES workflows_automation_engine.business_rules(id);

-- FKs para RULE_EXECUTIONS
ALTER TABLE workflows_automation_engine.rule_executions
ADD CONSTRAINT fk_rule_executions_business_rule
FOREIGN KEY (business_rule_id) REFERENCES workflows_automation_engine.business_rules(id);

ALTER TABLE workflows_automation_engine.rule_executions
ADD CONSTRAINT fk_rule_executions_workflow_execution
FOREIGN KEY (workflow_execution_id) REFERENCES workflows_automation_engine.workflow_executions(id);

-- FKs para RULE_ACTIONS
ALTER TABLE workflows_automation_engine.rule_actions
ADD CONSTRAINT fk_rule_actions_business_rule
FOREIGN KEY (business_rule_id) REFERENCES workflows_automation_engine.business_rules(id);

-- PARTE 3: Creación de Índices
-- ==================================================================================================================================================================

-- Índices para WORKFLOW_DEFINITIONS
CREATE INDEX idx_workflow_definitions_org_active ON workflows_automation_engine.workflow_definitions (organization_id, is_active);
CREATE INDEX idx_workflow_definitions_category ON workflows_automation_engine.workflow_definitions (workflow_category);
CREATE INDEX idx_workflow_definitions_trigger_type ON workflows_automation_engine.workflow_definitions (trigger_type);

-- Índices para WORKFLOW_STEPS
CREATE INDEX idx_workflow_steps_def_order ON workflows_automation_engine.workflow_steps (workflow_definition_id, step_order);
CREATE INDEX idx_workflow_steps_type ON workflows_automation_engine.workflow_steps (step_type);
-- Nota: La referencia a ML_MODELS no está en el archivo adjunto, por lo que no se crea el índice.

-- Índices para WORKFLOW_EXECUTIONS
CREATE INDEX idx_workflow_executions_def_status ON workflows_automation_engine.workflow_executions (workflow_definition_id, execution_status);
CREATE INDEX idx_workflow_executions_context ON workflows_automation_engine.workflow_executions (context_table, context_id);
CREATE INDEX idx_workflow_executions_status_started ON workflows_automation_engine.workflow_executions (execution_status, started_at);

-- Índices para WORKFLOW_VARIABLES
CREATE INDEX idx_workflow_variables_exec_scope ON workflows_automation_engine.workflow_variables (workflow_execution_id, variable_scope);
CREATE INDEX idx_workflow_variables_ai_gen ON workflows_automation_engine.workflow_variables (is_ai_generated);
CREATE INDEX idx_workflow_variables_type ON workflows_automation_engine.workflow_variables (variable_type);

-- Índices para WORKFLOW_SCHEDULES
CREATE INDEX idx_workflow_schedules_next_active ON workflows_automation_engine.workflow_schedules (next_execution_at, is_active);
CREATE INDEX idx_workflow_schedules_def ON workflows_automation_engine.workflow_schedules (workflow_definition_id);
CREATE INDEX idx_workflow_schedules_type ON workflows_automation_engine.workflow_schedules (schedule_type);

-- Índices para WORKFLOW_TEMPLATES
CREATE INDEX idx_workflow_templates_cat_ai ON workflows_automation_engine.workflow_templates (template_category, ai_recommendation_score);
CREATE INDEX idx_workflow_templates_industry_public ON workflows_automation_engine.workflow_templates (industry_specific, is_public);
CREATE INDEX idx_workflow_templates_usage_success ON workflows_automation_engine.workflow_templates (usage_count, success_rate);

-- Índices para BUSINESS_RULES
CREATE INDEX idx_business_rules_org_active ON workflows_automation_engine.business_rules (organization_id, is_active);
CREATE INDEX idx_business_rules_applies_to ON workflows_automation_engine.business_rules (applies_to_table);
CREATE INDEX idx_business_rules_priority ON workflows_automation_engine.business_rules (rule_priority);

-- Índices para RULE_CONDITIONS
CREATE INDEX idx_rule_conditions_rule_order ON workflows_automation_engine.rule_conditions (business_rule_id, condition_order);
CREATE INDEX idx_rule_conditions_type ON workflows_automation_engine.rule_conditions (condition_type);
-- Nota: La referencia a ML_MODELS no está en el archivo adjunto, por lo que no se crea el índice.

-- Índices para RULE_EXECUTIONS
CREATE INDEX idx_rule_executions_rule_executed ON workflows_automation_engine.rule_executions (business_rule_id, executed_at);
CREATE INDEX idx_rule_executions_context ON workflows_automation_engine.rule_executions (context_table, context_id);
CREATE INDEX idx_rule_executions_result_confidence ON workflows_automation_engine.rule_executions (rule_result, ai_confidence_score);

-- Índices para RULE_ACTIONS
CREATE INDEX idx_rule_actions_rule_order ON workflows_automation_engine.rule_actions (business_rule_id, action_order);
CREATE INDEX idx_rule_actions_type ON workflows_automation_engine.rule_actions (action_type);
CREATE INDEX idx_rule_actions_success_rate ON workflows_automation_engine.rule_actions (success_rate);

```

El código que proporcionaste para la tabla `audit_log` es robusto y está bien definido. He realizado las actualizaciones que me solicitaste para que sea específico para el esquema **`workflows_automation_engine`**, siguiendo la misma lógica de creación, adición de claves foráneas y la definición de índices.

Aquí está el script de PostgreSQL actualizado.

### Script de PostgreSQL

```sql
-- TABLA: AUDIT_LOG
-- Mdulo: AUDITORA Y TRAZABILIDAD
CREATE TABLE workflows_automation_engine.audit_log (
    id BIGSERIAL PRIMARY KEY,
    organization_id INTEGER,
    entity_name VARCHAR(100) NOT NULL,
    entity_id VARCHAR(50) NOT NULL,
    operation_type VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    changed_by_contact_id INTEGER,
    changed_by_user_id INTEGER,
    client_ip_address VARCHAR(45),
    user_agent TEXT,
    old_values JSONB,
    new_values JSONB,
    changed_fields JSONB,
    reason VARCHAR(255),
    session_id VARCHAR(255),
    request_id VARCHAR(100),
    transaction_id VARCHAR(100),
    severity_level VARCHAR(20),
    is_sensitive_data BOOLEAN DEFAULT FALSE,
    compliance_flags JSONB,
    retention_until DATE,
    additional_context JSONB
);

-- Agregar relaciones y llaves forneas (FKs)
ALTER TABLE workflows_automation_engine.audit_log ADD CONSTRAINT fk_audit_log_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE workflows_automation_engine.audit_log ADD CONSTRAINT fk_audit_log_contact FOREIGN KEY (changed_by_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE workflows_automation_engine.audit_log ADD CONSTRAINT fk_audit_log_user FOREIGN KEY (changed_by_user_id) REFERENCES base_foundation.users(id);

-- Creacin de ndices para optimizacin de bsquedas
CREATE INDEX idx_audit_log_org ON workflows_automation_engine.audit_log (organization_id);
CREATE INDEX idx_audit_log_entity ON workflows_automation_engine.audit_log (entity_name, entity_id);
CREATE INDEX idx_audit_log_operation ON workflows_automation_engine.audit_log (operation_type);
CREATE INDEX idx_audit_log_created_at ON workflows_automation_engine.audit_log (created_at);
```

-- SEPARADOR DE ESQUEMAS --

Perfecto. He analizado el archivo proporcionado y he creado el script DDL de PostgreSQL para el esquema **`finanzas_bookkeeping`**. Este script sigue la misma lógica que los anteriores para garantizar un orden de creación correcto y evitar problemas de dependencias entre tablas.

-----

### Descripción de la Lógica de Creación

Para asegurar que todas las tablas puedan crearse sin conflictos, el script se divide en tres partes:

1.  **Creación del Esquema y Tablas Sin Claves Foráneas:** Se crea el esquema `finanzas_bookkeeping` y todas las tablas con sus campos, tipos de datos y claves primarias, pero sin definir las relaciones de clave foránea. [cite\_start]Esto permite que cada tabla exista antes de que se establezcan sus vínculos con otras tablas[cite: 403, 404].
2.  **Definición de Claves Foráneas:** Utilizando sentencias `ALTER TABLE`, se agregan todas las claves foráneas necesarias para establecer las relaciones correctas entre las tablas. [cite\_start]Por ejemplo, `BANK_TRANSACTIONS` se relaciona con `BANK_ACCOUNTS`, `IRS_CATEGORIES`, `VIRTUAL_WALLETS`, y `CUSTOMER_PROJECTS`[cite: 407, 408, 409].
3.  [cite\_start]**Creación de Índices:** Se crean los índices sugeridos en el documento para optimizar el rendimiento de las consultas y búsquedas más comunes, como los índices en `organization_id` y `is_active` para la tabla `BANK_ACCOUNTS`[cite: 405, 406].

-----

### Script de PostgreSQL

```sql
-- PARTE 1: Creación del esquema y tablas con PKs y restricciones de columna

CREATE SCHEMA IF NOT EXISTS finanzas_bookkeeping;

-- TABLA 106: BANK_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.bank_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    account_type VARCHAR(30) NOT NULL,
    bank_name VARCHAR(100),
    account_number VARCHAR(50),
    routing_number VARCHAR(20),
    plaid_account_id VARCHAR(100) UNIQUE,
    plaid_access_token VARCHAR(255),
    current_balance DECIMAL(12,2),
    available_balance DECIMAL(12,2),
    last_sync_date TIMESTAMP,
    auto_sync_enabled BOOLEAN DEFAULT TRUE,
    is_primary BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Restricción única compuesta
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT unique_organization_account_number UNIQUE (organization_id, account_number);

-- TABLA 107: BANK_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.bank_transactions (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    plaid_transaction_id VARCHAR(100) UNIQUE,
    transaction_date DATE NOT NULL,
    post_date DATE,
    amount DECIMAL(12,2) NOT NULL,
    description VARCHAR(300),
    merchant_name VARCHAR(100),
    category_primary VARCHAR(50),
    category_detailed VARCHAR(100),
    account_owner VARCHAR(100),
    pending BOOLEAN DEFAULT FALSE,
    check_number VARCHAR(20),
    irs_category_id INT,
    ai_categorized BOOLEAN DEFAULT FALSE,
    categorization_confidence DECIMAL(5,2),
    wallet_id INT,
    project_id INT,
    reconciled BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT unique_bank_check UNIQUE (bank_account_id, check_number) WHERE check_number IS NOT NULL
);

-- TABLA 108: TRANSACTION_SPLITS
CREATE TABLE finanzas_bookkeeping.transaction_splits (
    id SERIAL PRIMARY KEY,
    parent_transaction_id INT NOT NULL,
    split_amount DECIMAL(12,2) NOT NULL,
    split_description VARCHAR(300),
    irs_category_id INT,
    assigned_to_contact_id INT,
    assigned_to_project_id INT,
    wallet_id INT,
    split_percentage DECIMAL(5,2),
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT check_split_percentage CHECK (split_percentage BETWEEN 0 AND 100)
);

-- TABLA 109: CASH_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.cash_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    current_balance DECIMAL(10,2),
    location VARCHAR(100),
    responsible_contact_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT unique_org_account_name UNIQUE (organization_id, account_name);

-- TABLA 110: CHECK_REGISTER
CREATE TABLE finanzas_bookkeeping.check_register (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    check_number VARCHAR(20),
    payee_name VARCHAR(100),
    payee_contact_id INT,
    amount DECIMAL(10,2),
    memo VARCHAR(200),
    issue_date DATE,
    cleared_date DATE,
    status VARCHAR(20) NOT NULL,
    wallet_id INT,
    related_invoice_id INT,
    issued_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT unique_account_check_number UNIQUE (bank_account_id, check_number);

-- TABLA 111: IRS_CATEGORIES
CREATE TABLE finanzas_bookkeeping.irs_categories (
    id SERIAL PRIMARY KEY,
    category_code VARCHAR(20) UNIQUE,
    category_name VARCHAR(100),
    irs_form_line VARCHAR(50),
    description TEXT,
    is_deductible BOOLEAN DEFAULT TRUE,
    requires_documentation BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 112: TRANSACTION_CATEGORIES
CREATE TABLE finanzas_bookkeeping.transaction_categories (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    category_name VARCHAR(100),
    parent_category_id INT,
    irs_category_id INT,
    icon_name VARCHAR(50),
    color VARCHAR(7),
    is_expense BOOLEAN DEFAULT TRUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT unique_org_category_name UNIQUE (organization_id, category_name);

-- TABLA 113: UNCATEGORIZED_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.uncategorized_transactions (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT UNIQUE,
    suggested_category_id INT,
    confidence_score DECIMAL(5,2),
    requires_attention BOOLEAN DEFAULT TRUE,
    reviewed_by_contact_id INT,
    reviewed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 114: AI_CATEGORIZATION_LOG
CREATE TABLE finanzas_bookkeeping.ai_categorization_log (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT,
    ai_model_version VARCHAR(50),
    prediction_confidence DECIMAL(5,2),
    predicted_category_id INT,
    actual_category_id INT,
    prediction_correct BOOLEAN,
    features_used JSON,
    processing_time_ms INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 115: WALLET_TYPES
CREATE TABLE finanzas_bookkeeping.wallet_types (
    id SERIAL PRIMARY KEY,
    type_name VARCHAR(50) UNIQUE,
    description TEXT,
    default_rules JSON,
    icon_name VARCHAR(50),
    is_system_type BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 116: VIRTUAL_WALLETS
CREATE TABLE finanzas_bookkeeping.virtual_wallets (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    wallet_type_id INT,
    wallet_name VARCHAR(100),
    description TEXT,
    current_balance DECIMAL(12,2),
    allocated_budget DECIMAL(12,2),
    responsible_contact_id INT,
    project_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    auto_allocate_rules JSON,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT unique_org_wallet_name UNIQUE (organization_id, wallet_name);

-- TABLA 117: WALLET_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.wallet_transactions (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    bank_transaction_id INT,
    amount DECIMAL(12,2) NOT NULL,
    transaction_type VARCHAR(20) NOT NULL,
    description VARCHAR(300),
    reference_type VARCHAR(30),
    reference_id INT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 118: WALLET_BALANCES
CREATE TABLE finanzas_bookkeeping.wallet_balances (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    balance_date DATE NOT NULL,
    opening_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    transaction_count INT,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT unique_wallet_date UNIQUE (wallet_id, balance_date);

-- TABLA 119: INVOICE_PAYMENTS
CREATE TABLE finanzas_bookkeeping.invoice_payments (
    id SERIAL PRIMARY KEY,
    invoice_id INT,
    payment_amount DECIMAL(12,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method VARCHAR(30) NOT NULL,
    payment_reference VARCHAR(100),
    bank_account_id INT,
    processed_payment_id INT,
    payment_processor_fee DECIMAL(8,2),
    net_payment_amount DECIMAL(12,2),
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 120: PAYMENT_ALLOCATIONS
CREATE TABLE finanzas_bookkeeping.payment_allocations (
    id SERIAL PRIMARY KEY,
    invoice_payment_id INT NOT NULL,
    bank_transaction_id INT,
    allocated_amount DECIMAL(12,2) NOT NULL,
    allocation_notes TEXT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 121: PAYMENT_REVERSALS
CREATE TABLE finanzas_bookkeeping.payment_reversals (
    id SERIAL PRIMARY KEY,
    original_payment_id INT NOT NULL,
    reversal_amount DECIMAL(12,2) NOT NULL,
    reversal_date DATE NOT NULL,
    reversal_reason VARCHAR(100),
    reversal_transaction_id INT,
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 122: COMMISSION_CALCULATIONS
CREATE TABLE finanzas_bookkeeping.commission_calculations (
    id SERIAL PRIMARY KEY,
    invoice_id INT NOT NULL,
    salesperson_contact_id INT NOT NULL,
    commission_percentage DECIMAL(5,2),
    commission_amount DECIMAL(10,2),
    calculation_base DECIMAL(12,2),
    payment_status VARCHAR(20) NOT NULL,
    wallet_id INT,
    paid_via_check_id INT,
    calculated_at TIMESTAMP,
    paid_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT unique_invoice_salesperson UNIQUE (invoice_id, salesperson_contact_id);

-- TABLA 123: BANK_STATEMENTS
CREATE TABLE finanzas_bookkeeping.bank_statements (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    statement_month INT NOT NULL,
    statement_year INT NOT NULL,
    statement_start_date DATE,
    statement_end_date DATE,
    opening_balance DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    statement_file_url VARCHAR(300),
    upload_date TIMESTAMP,
    reconciled BOOLEAN DEFAULT FALSE,
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT unique_account_month_year UNIQUE (bank_account_id, statement_month, statement_year);

-- TABLA 124: TRANSACTION_ATTACHMENTS
CREATE TABLE finanzas_bookkeeping.transaction_attachments (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT NOT NULL,
    attachment_type VARCHAR(30) NOT NULL,
    file_name VARCHAR(255),
    file_url VARCHAR(300),
    file_size INT,
    mime_type VARCHAR(100),
    description VARCHAR(300),
    extracted_text TEXT,
    extraction_confidence DECIMAL(5,2),
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 125: EXPENSE_DOCUMENTS
CREATE TABLE finanzas_bookkeeping.expense_documents (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    contact_id INT NOT NULL,
    expense_category_id INT,
    expense_amount DECIMAL(10,2) NOT NULL,
    expense_date DATE NOT NULL,
    vendor_name VARCHAR(100),
    description VARCHAR(300),
    document_type VARCHAR(30) NOT NULL,
    file_url VARCHAR(300),
    ocr_extracted_data JSON,
    approval_status VARCHAR(20) NOT NULL,
    approved_by_contact_id INT,
    approved_at TIMESTAMP,
    reimbursement_status VARCHAR(20) NOT NULL,
    bank_transaction_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 126: PROJECT_FINANCIALS
CREATE TABLE finanzas_bookkeeping.project_financials (
    id SERIAL PRIMARY KEY,
    customer_project_id INT NOT NULL,
    calculation_date DATE NOT NULL,
    total_invoiced DECIMAL(12,2),
    total_received DECIMAL(12,2),
    outstanding_receivables DECIMAL(12,2),
    direct_labor_cost DECIMAL(12,2),
    materials_cost DECIMAL(12,2),
    equipment_cost DECIMAL(12,2),
    subcontractor_cost DECIMAL(12,2),
    other_expenses DECIMAL(12,2),
    total_expenses DECIMAL(12,2),
    gross_profit DECIMAL(12,2),
    profit_margin_percentage DECIMAL(5,2),
    total_commissions DECIMAL(10,2),
    last_calculated_at TIMESTAMP,
    calculated_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT unique_project_date UNIQUE (customer_project_id, calculation_date);

-- PARTE 2: Definición de Claves Foráneas

-- BANK_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT fk_bank_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

-- BANK_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- TRANSACTION_SPLITS
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_bank_transaction FOREIGN KEY (parent_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_assigned_contact FOREIGN KEY (assigned_to_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_project FOREIGN KEY (assigned_to_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- CASH_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);

-- CHECK_REGISTER
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_payee_contact FOREIGN KEY (payee_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_related_invoice FOREIGN KEY (related_invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_issued_by FOREIGN KEY (issued_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_CATEGORIES
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_parent FOREIGN KEY (parent_category_id) REFERENCES finanzas_bookkeeping.transaction_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- UNCATEGORIZED_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_suggested_category FOREIGN KEY (suggested_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_reviewed_by FOREIGN KEY (reviewed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- AI_CATEGORIZATION_LOG
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_predicted_category FOREIGN KEY (predicted_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_actual_category FOREIGN KEY (actual_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- VIRTUAL_WALLETS
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_wallet_type FOREIGN KEY (wallet_type_id) REFERENCES finanzas_bookkeeping.wallet_types(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- WALLET_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- WALLET_BALANCES
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT fk_wallet_balances_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);

-- INVOICE_PAYMENTS
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_payment FOREIGN KEY (processed_payment_id) REFERENCES base_foundation.processed_payments(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_ALLOCATIONS
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_invoice_payment FOREIGN KEY (invoice_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_REVERSALS
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_original_payment FOREIGN KEY (original_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_bank_transaction FOREIGN KEY (reversal_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- COMMISSION_CALCULATIONS
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_salesperson FOREIGN KEY (salesperson_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_check_register FOREIGN KEY (paid_via_check_id) REFERENCES finanzas_bookkeeping.check_register(id);

-- BANK_STATEMENTS
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_ATTACHMENTS
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- EXPENSE_DOCUMENTS
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_irs_category FOREIGN KEY (expense_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_approved_by FOREIGN KEY (approved_by_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);

-- PROJECT_FINANCIALS
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_project FOREIGN KEY (customer_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_calculated_by FOREIGN KEY (calculated_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PARTE 3: Creación de Índices para optimización de búsquedas

-- BANK_ACCOUNTS
CREATE INDEX idx_bank_accounts_org_active ON finanzas_bookkeeping.bank_accounts (organization_id, is_active);
CREATE INDEX idx_bank_accounts_plaid ON finanzas_bookkeeping.bank_accounts (plaid_account_id);

-- BANK_TRANSACTIONS
CREATE INDEX idx_bank_transactions_account_date ON finanzas_bookkeeping.bank_transactions (bank_account_id, transaction_date);
CREATE INDEX idx_bank_transactions_reconciled ON finanzas_bookkeeping.bank_transactions (reconciled, transaction_date);
CREATE INDEX idx_bank_transactions_plaid ON finanzas_bookkeeping.bank_transactions (plaid_transaction_id);

-- TRANSACTION_SPLITS
CREATE INDEX idx_transaction_splits_parent ON finanzas_bookkeeping.transaction_splits (parent_transaction_id);
CREATE INDEX idx_transaction_splits_project ON finanzas_bookkeeping.transaction_splits (assigned_to_project_id);

-- CASH_ACCOUNTS
CREATE INDEX idx_cash_accounts_org_active ON finanzas_bookkeeping.cash_accounts (organization_id, is_active);

-- CHECK_REGISTER
CREATE INDEX idx_check_register_account_status ON finanzas_bookkeeping.check_register (bank_account_id, status);
CREATE INDEX idx_check_register_payee ON finanzas_bookkeeping.check_register (payee_contact_id);

-- IRS_CATEGORIES
CREATE INDEX idx_irs_categories_active ON finanzas_bookkeeping.irs_categories (is_active);
CREATE INDEX idx_irs_categories_deductible ON finanzas_bookkeeping.irs_categories (is_deductible);

-- TRANSACTION_CATEGORIES
CREATE INDEX idx_transaction_categories_org_active ON finanzas_bookkeeping.transaction_categories (organization_id, is_active);
CREATE INDEX idx_transaction_categories_parent ON finanzas_bookkeeping.transaction_categories (parent_category_id);

-- UNCATEGORIZED_TRANSACTIONS
CREATE INDEX idx_uncategorized_requires_attention ON finanzas_bookkeeping.uncategorized_transactions (requires_attention);
CREATE INDEX idx_uncategorized_confidence ON finanzas_bookkeeping.uncategorized_transactions (confidence_score);

-- AI_CATEGORIZATION_LOG
CREATE INDEX idx_ai_categorization_accuracy ON finanzas_bookkeeping.ai_categorization_log (prediction_correct, created_at);
CREATE INDEX idx_ai_categorization_model ON finanzas_bookkeeping.ai_categorization_log (ai_model_version);

-- WALLET_TYPES
CREATE INDEX idx_wallet_types_active ON finanzas_bookkeeping.wallet_types (is_active);

-- VIRTUAL_WALLETS
CREATE INDEX idx_virtual_wallets_org_active ON finanzas_bookkeeping.virtual_wallets (organization_id, is_active);
CREATE INDEX idx_virtual_wallets_project ON finanzas_bookkeeping.virtual_wallets (project_id);

-- WALLET_TRANSACTIONS
CREATE INDEX idx_wallet_transactions_wallet_date ON finanzas_bookkeeping.wallet_transactions (wallet_id, created_at);
CREATE INDEX idx_wallet_transactions_reference ON finanzas_bookkeeping.wallet_transactions (reference_type, reference_id);

-- WALLET_BALANCES
CREATE INDEX idx_wallet_balances_wallet_date ON finanzas_bookkeeping.wallet_balances (wallet_id, balance_date);

-- INVOICE_PAYMENTS
CREATE INDEX idx_invoice_payments_invoice ON finanzas_bookkeeping.invoice_payments (invoice_id);
CREATE INDEX idx_invoice_payments_date ON finanzas_bookkeeping.invoice_payments (payment_date);

-- PAYMENT_ALLOCATIONS
CREATE INDEX idx_payment_allocations_payment ON finanzas_bookkeeping.payment_allocations (invoice_payment_id);
CREATE INDEX idx_payment_allocations_transaction ON finanzas_bookkeeping.payment_allocations (bank_transaction_id);

-- PAYMENT_REVERSALS
CREATE INDEX idx_payment_reversals_original ON finanzas_bookkeeping.payment_reversals (original_payment_id);
CREATE INDEX idx_payment_reversals_reason ON finanzas_bookkeeping.payment_reversals (reversal_reason);

-- COMMISSION_CALCULATIONS
CREATE INDEX idx_commission_calculations_salesperson ON finanzas_bookkeeping.commission_calculations (salesperson_contact_id);
CREATE INDEX idx_commission_calculations_status ON finanzas_bookkeeping.commission_calculations (payment_status);

-- BANK_STATEMENTS
CREATE INDEX idx_bank_statements_account_period ON finanzas_bookkeeping.bank_statements (bank_account_id, statement_year, statement_month);
CREATE INDEX idx_bank_statements_reconciled ON finanzas_bookkeeping.bank_statements (reconciled);

-- TRANSACTION_ATTACHMENTS
CREATE INDEX idx_transaction_attachments_transaction ON finanzas_bookkeeping.transaction_attachments (bank_transaction_id);
CREATE INDEX idx_transaction_attachments_type ON finanzas_bookkeeping.transaction_attachments (attachment_type);

-- EXPENSE_DOCUMENTS
CREATE INDEX idx_expense_documents_contact_status ON finanzas_bookkeeping.expense_documents (contact_id, approval_status);
CREATE INDEX idx_expense_documents_org_date ON finanzas_bookkeeping.expense_documents (organization_id, expense_date);

-- PROJECT_FINANCIALS
CREATE INDEX idx_project_financials_project_date ON finanzas_bookkeeping.project_financials (customer_project_id, calculation_date);

```

¿Necesitas que continúe con otra parte del proyecto o que realice alguna modificación en este script?

¡Entendido\! Gracias por señalar el error. Tienes toda la razón, la sintaxis del `CONSTRAINT` con la cláusula `WHERE` no es válida en PostgreSQL. La funcionalidad que buscas, un índice de unicidad parcial, se logra con un `UNIQUE INDEX` en lugar de una `CONSTRAINT`.

He corregido el script DDL de PostgreSQL para el esquema **`finanzas_bookkeeping`**. El error se encontraba en la definición de la tabla `BANK_TRANSACTIONS`. He eliminado la restricción incorrecta y la he reemplazado por un **índice único parcial** en la sección de creación de índices, tal como debe ser en PostgreSQL.

-----

### Script de PostgreSQL (Corregido)

He aquí el script actualizado y corregido, que debería ejecutarse sin problemas.

```sql
-- PARTE 1: Creación del esquema y tablas con PKs y restricciones de columna

CREATE SCHEMA IF NOT EXISTS finanzas_bookkeeping;

-- TABLA 106: BANK_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.bank_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    account_type VARCHAR(30) NOT NULL,
    bank_name VARCHAR(100),
    account_number VARCHAR(50),
    routing_number VARCHAR(20),
    plaid_account_id VARCHAR(100) UNIQUE,
    plaid_access_token VARCHAR(255),
    current_balance DECIMAL(12,2),
    available_balance DECIMAL(12,2),
    last_sync_date TIMESTAMP,
    auto_sync_enabled BOOLEAN DEFAULT TRUE,
    is_primary BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Restricción única compuesta
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT unique_organization_account_number UNIQUE (organization_id, account_number);

-- TABLA 107: BANK_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.bank_transactions (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    plaid_transaction_id VARCHAR(100) UNIQUE,
    transaction_date DATE NOT NULL,
    post_date DATE,
    amount DECIMAL(12,2) NOT NULL,
    description VARCHAR(300),
    merchant_name VARCHAR(100),
    category_primary VARCHAR(50),
    category_detailed VARCHAR(100),
    account_owner VARCHAR(100),
    pending BOOLEAN DEFAULT FALSE,
    check_number VARCHAR(20),
    irs_category_id INT,
    ai_categorized BOOLEAN DEFAULT FALSE,
    categorization_confidence DECIMAL(5,2),
    wallet_id INT,
    project_id INT,
    reconciled BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 108: TRANSACTION_SPLITS
CREATE TABLE finanzas_bookkeeping.transaction_splits (
    id SERIAL PRIMARY KEY,
    parent_transaction_id INT NOT NULL,
    split_amount DECIMAL(12,2) NOT NULL,
    split_description VARCHAR(300),
    irs_category_id INT,
    assigned_to_contact_id INT,
    assigned_to_project_id INT,
    wallet_id INT,
    split_percentage DECIMAL(5,2),
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT check_split_percentage CHECK (split_percentage BETWEEN 0 AND 100)
);

-- TABLA 109: CASH_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.cash_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    current_balance DECIMAL(10,2),
    location VARCHAR(100),
    responsible_contact_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT unique_org_account_name UNIQUE (organization_id, account_name);

-- TABLA 110: CHECK_REGISTER
CREATE TABLE finanzas_bookkeeping.check_register (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    check_number VARCHAR(20),
    payee_name VARCHAR(100),
    payee_contact_id INT,
    amount DECIMAL(10,2),
    memo VARCHAR(200),
    issue_date DATE,
    cleared_date DATE,
    status VARCHAR(20) NOT NULL,
    wallet_id INT,
    related_invoice_id INT,
    issued_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT unique_account_check_number UNIQUE (bank_account_id, check_number);

-- TABLA 111: IRS_CATEGORIES
CREATE TABLE finanzas_bookkeeping.irs_categories (
    id SERIAL PRIMARY KEY,
    category_code VARCHAR(20) UNIQUE,
    category_name VARCHAR(100),
    irs_form_line VARCHAR(50),
    description TEXT,
    is_deductible BOOLEAN DEFAULT TRUE,
    requires_documentation BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 112: TRANSACTION_CATEGORIES
CREATE TABLE finanzas_bookkeeping.transaction_categories (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    category_name VARCHAR(100),
    parent_category_id INT,
    irs_category_id INT,
    icon_name VARCHAR(50),
    color VARCHAR(7),
    is_expense BOOLEAN DEFAULT TRUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT unique_org_category_name UNIQUE (organization_id, category_name);

-- TABLA 113: UNCATEGORIZED_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.uncategorized_transactions (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT UNIQUE,
    suggested_category_id INT,
    confidence_score DECIMAL(5,2),
    requires_attention BOOLEAN DEFAULT TRUE,
    reviewed_by_contact_id INT,
    reviewed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 114: AI_CATEGORIZATION_LOG
CREATE TABLE finanzas_bookkeeping.ai_categorization_log (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT,
    ai_model_version VARCHAR(50),
    prediction_confidence DECIMAL(5,2),
    predicted_category_id INT,
    actual_category_id INT,
    prediction_correct BOOLEAN,
    features_used JSON,
    processing_time_ms INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 115: WALLET_TYPES
CREATE TABLE finanzas_bookkeeping.wallet_types (
    id SERIAL PRIMARY KEY,
    type_name VARCHAR(50) UNIQUE,
    description TEXT,
    default_rules JSON,
    icon_name VARCHAR(50),
    is_system_type BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 116: VIRTUAL_WALLETS
CREATE TABLE finanzas_bookkeeping.virtual_wallets (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    wallet_type_id INT,
    wallet_name VARCHAR(100),
    description TEXT,
    current_balance DECIMAL(12,2),
    allocated_budget DECIMAL(12,2),
    responsible_contact_id INT,
    project_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    auto_allocate_rules JSON,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT unique_org_wallet_name UNIQUE (organization_id, wallet_name);

-- TABLA 117: WALLET_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.wallet_transactions (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    bank_transaction_id INT,
    amount DECIMAL(12,2) NOT NULL,
    transaction_type VARCHAR(20) NOT NULL,
    description VARCHAR(300),
    reference_type VARCHAR(30),
    reference_id INT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 118: WALLET_BALANCES
CREATE TABLE finanzas_bookkeeping.wallet_balances (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    balance_date DATE NOT NULL,
    opening_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    transaction_count INT,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT unique_wallet_date UNIQUE (wallet_id, balance_date);

-- TABLA 119: INVOICE_PAYMENTS
CREATE TABLE finanzas_bookkeeping.invoice_payments (
    id SERIAL PRIMARY KEY,
    invoice_id INT,
    payment_amount DECIMAL(12,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method VARCHAR(30) NOT NULL,
    payment_reference VARCHAR(100),
    bank_account_id INT,
    processed_payment_id INT,
    payment_processor_fee DECIMAL(8,2),
    net_payment_amount DECIMAL(12,2),
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 120: PAYMENT_ALLOCATIONS
CREATE TABLE finanzas_bookkeeping.payment_allocations (
    id SERIAL PRIMARY KEY,
    invoice_payment_id INT NOT NULL,
    bank_transaction_id INT,
    allocated_amount DECIMAL(12,2) NOT NULL,
    allocation_notes TEXT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 121: PAYMENT_REVERSALS
CREATE TABLE finanzas_bookkeeping.payment_reversals (
    id SERIAL PRIMARY KEY,
    original_payment_id INT NOT NULL,
    reversal_amount DECIMAL(12,2) NOT NULL,
    reversal_date DATE NOT NULL,
    reversal_reason VARCHAR(100),
    reversal_transaction_id INT,
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 122: COMMISSION_CALCULATIONS
CREATE TABLE finanzas_bookkeeping.commission_calculations (
    id SERIAL PRIMARY KEY,
    invoice_id INT NOT NULL,
    salesperson_contact_id INT NOT NULL,
    commission_percentage DECIMAL(5,2),
    commission_amount DECIMAL(10,2),
    calculation_base DECIMAL(12,2),
    payment_status VARCHAR(20) NOT NULL,
    wallet_id INT,
    paid_via_check_id INT,
    calculated_at TIMESTAMP,
    paid_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT unique_invoice_salesperson UNIQUE (invoice_id, salesperson_contact_id);

-- TABLA 123: BANK_STATEMENTS
CREATE TABLE finanzas_bookkeeping.bank_statements (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    statement_month INT NOT NULL,
    statement_year INT NOT NULL,
    statement_start_date DATE,
    statement_end_date DATE,
    opening_balance DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    statement_file_url VARCHAR(300),
    upload_date TIMESTAMP,
    reconciled BOOLEAN DEFAULT FALSE,
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT unique_account_month_year UNIQUE (bank_account_id, statement_month, statement_year);

-- TABLA 124: TRANSACTION_ATTACHMENTS
CREATE TABLE finanzas_bookkeeping.transaction_attachments (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT NOT NULL,
    attachment_type VARCHAR(30) NOT NULL,
    file_name VARCHAR(255),
    file_url VARCHAR(300),
    file_size INT,
    mime_type VARCHAR(100),
    description VARCHAR(300),
    extracted_text TEXT,
    extraction_confidence DECIMAL(5,2),
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 125: EXPENSE_DOCUMENTS
CREATE TABLE finanzas_bookkeeping.expense_documents (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    contact_id INT NOT NULL,
    expense_category_id INT,
    expense_amount DECIMAL(10,2) NOT NULL,
    expense_date DATE NOT NULL,
    vendor_name VARCHAR(100),
    description VARCHAR(300),
    document_type VARCHAR(30) NOT NULL,
    file_url VARCHAR(300),
    ocr_extracted_data JSON,
    approval_status VARCHAR(20) NOT NULL,
    approved_by_contact_id INT,
    approved_at TIMESTAMP,
    reimbursement_status VARCHAR(20) NOT NULL,
    bank_transaction_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 126: PROJECT_FINANCIALS
CREATE TABLE finanzas_bookkeeping.project_financials (
    id SERIAL PRIMARY KEY,
    customer_project_id INT NOT NULL,
    calculation_date DATE NOT NULL,
    total_invoiced DECIMAL(12,2),
    total_received DECIMAL(12,2),
    outstanding_receivables DECIMAL(12,2),
    direct_labor_cost DECIMAL(12,2),
    materials_cost DECIMAL(12,2),
    equipment_cost DECIMAL(12,2),
    subcontractor_cost DECIMAL(12,2),
    other_expenses DECIMAL(12,2),
    total_expenses DECIMAL(12,2),
    gross_profit DECIMAL(12,2),
    profit_margin_percentage DECIMAL(5,2),
    total_commissions DECIMAL(10,2),
    last_calculated_at TIMESTAMP,
    calculated_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT unique_project_date UNIQUE (customer_project_id, calculation_date);

-- PARTE 2: Definición de Claves Foráneas

-- BANK_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT fk_bank_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

-- BANK_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- TRANSACTION_SPLITS
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_bank_transaction FOREIGN KEY (parent_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_assigned_contact FOREIGN KEY (assigned_to_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_project FOREIGN KEY (assigned_to_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- CASH_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);

-- CHECK_REGISTER
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_payee_contact FOREIGN KEY (payee_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_related_invoice FOREIGN KEY (related_invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_issued_by FOREIGN KEY (issued_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_CATEGORIES
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_parent FOREIGN KEY (parent_category_id) REFERENCES finanzas_bookkeeping.transaction_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- UNCATEGORIZED_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_suggested_category FOREIGN KEY (suggested_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_reviewed_by FOREIGN KEY (reviewed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- AI_CATEGORIZATION_LOG
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_predicted_category FOREIGN KEY (predicted_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_actual_category FOREIGN KEY (actual_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- VIRTUAL_WALLETS
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_wallet_type FOREIGN KEY (wallet_type_id) REFERENCES finanzas_bookkeeping.wallet_types(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- WALLET_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- WALLET_BALANCES
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT fk_wallet_balances_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);

-- INVOICE_PAYMENTS
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_payment FOREIGN KEY (processed_payment_id) REFERENCES base_foundation.processed_payments(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_ALLOCATIONS
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_invoice_payment FOREIGN KEY (invoice_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_REVERSALS
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_original_payment FOREIGN KEY (original_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_bank_transaction FOREIGN KEY (reversal_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- COMMISSION_CALCULATIONS
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_salesperson FOREIGN KEY (salesperson_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_check_register FOREIGN KEY (paid_via_check_id) REFERENCES finanzas_bookkeeping.check_register(id);

-- BANK_STATEMENTS
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_ATTACHMENTS
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- EXPENSE_DOCUMENTS
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_irs_category FOREIGN KEY (expense_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_approved_by FOREIGN KEY (approved_by_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);

-- PROJECT_FINANCIALS
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_project FOREIGN KEY (customer_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_calculated_by FOREIGN KEY (calculated_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PARTE 3: Creación de Índices para optimización de búsquedas

-- BANK_ACCOUNTS
CREATE INDEX idx_bank_accounts_org_active ON finanzas_bookkeeping.bank_accounts (organization_id, is_active);
CREATE INDEX idx_bank_accounts_plaid ON finanzas_bookkeeping.bank_accounts (plaid_account_id);

-- BANK_TRANSACTIONS
CREATE INDEX idx_bank_transactions_account_date ON finanzas_bookkeeping.bank_transactions (bank_account_id, transaction_date);
CREATE INDEX idx_bank_transactions_reconciled ON finanzas_bookkeeping.bank_transactions (reconciled, transaction_date);
CREATE INDEX idx_bank_transactions_plaid ON finanzas_bookkeeping.bank_transactions (plaid_transaction_id);
-- Índice único parcial para check_number (corrección de error)
CREATE UNIQUE INDEX idx_unique_bank_check ON finanzas_bookkeeping.bank_transactions (bank_account_id, check_number) WHERE check_number IS NOT NULL;

-- TRANSACTION_SPLITS
CREATE INDEX idx_transaction_splits_parent ON finanzas_bookkeeping.transaction_splits (parent_transaction_id);
CREATE INDEX idx_transaction_splits_project ON finanzas_bookkeeping.transaction_splits (assigned_to_project_id);

-- CASH_ACCOUNTS
CREATE INDEX idx_cash_accounts_org_active ON finanzas_bookkeeping.cash_accounts (organization_id, is_active);

-- CHECK_REGISTER
CREATE INDEX idx_check_register_account_status ON finanzas_bookkeeping.check_register (bank_account_id, status);
CREATE INDEX idx_check_register_payee ON finanzas_bookkeeping.check_register (payee_contact_id);

-- IRS_CATEGORIES
CREATE INDEX idx_irs_categories_active ON finanzas_bookkeeping.irs_categories (is_active);
CREATE INDEX idx_irs_categories_deductible ON finanzas_bookkeeping.irs_categories (is_deductible);

-- TRANSACTION_CATEGORIES
CREATE INDEX idx_transaction_categories_org_active ON finanzas_bookkeeping.transaction_categories (organization_id, is_active);
CREATE INDEX idx_transaction_categories_parent ON finanzas_bookkeeping.transaction_categories (parent_category_id);

-- UNCATEGORIZED_TRANSACTIONS
CREATE INDEX idx_uncategorized_requires_attention ON finanzas_bookkeeping.uncategorized_transactions (requires_attention);
CREATE INDEX idx_uncategorized_confidence ON finanzas_bookkeeping.uncategorized_transactions (confidence_score);

-- AI_CATEGORIZATION_LOG
CREATE INDEX idx_ai_categorization_accuracy ON finanzas_bookkeeping.ai_categorization_log (prediction_correct, created_at);
CREATE INDEX idx_ai_categorization_model ON finanzas_bookkeeping.ai_categorization_log (ai_model_version);

-- WALLET_TYPES
CREATE INDEX idx_wallet_types_active ON finanzas_bookkeeping.wallet_types (is_active);

-- VIRTUAL_WALLETS
CREATE INDEX idx_virtual_wallets_org_active ON finanzas_bookkeeping.virtual_wallets (organization_id, is_active);
CREATE INDEX idx_virtual_wallets_project ON finanzas_bookkeeping.virtual_wallets (project_id);

-- WALLET_TRANSACTIONS
CREATE INDEX idx_wallet_transactions_wallet_date ON finanzas_bookkeeping.wallet_transactions (wallet_id, created_at);
CREATE INDEX idx_wallet_transactions_reference ON finanzas_bookkeeping.wallet_transactions (reference_type, reference_id);

-- WALLET_BALANCES
CREATE INDEX idx_wallet_balances_wallet_date ON finanzas_bookkeeping.wallet_balances (wallet_id, balance_date);

-- INVOICE_PAYMENTS
CREATE INDEX idx_invoice_payments_invoice ON finanzas_bookkeeping.invoice_payments (invoice_id);
CREATE INDEX idx_invoice_payments_date ON finanzas_bookkeeping.invoice_payments (payment_date);

-- PAYMENT_ALLOCATIONS
CREATE INDEX idx_payment_allocations_payment ON finanzas_bookkeeping.payment_allocations (invoice_payment_id);
CREATE INDEX idx_payment_allocations_transaction ON finanzas_bookkeeping.payment_allocations (bank_transaction_id);

-- PAYMENT_REVERSALS
CREATE INDEX idx_payment_reversals_original ON finanzas_bookkeeping.payment_reversals (original_payment_id);
CREATE INDEX idx_payment_reversals_reason ON finanzas_bookkeeping.payment_reversals (reversal_reason);

-- COMMISSION_CALCULATIONS
CREATE INDEX idx_commission_calculations_salesperson ON finanzas_bookkeeping.commission_calculations (salesperson_contact_id);
CREATE INDEX idx_commission_calculations_status ON finanzas_bookkeeping.commission_calculations (payment_status);

-- BANK_STATEMENTS
CREATE INDEX idx_bank_statements_account_period ON finanzas_bookkeeping.bank_statements (bank_account_id, statement_year, statement_month);
CREATE INDEX idx_bank_statements_reconciled ON finanzas_bookkeeping.bank_statements (reconciled);

-- TRANSACTION_ATTACHMENTS
CREATE INDEX idx_transaction_attachments_transaction ON finanzas_bookkeeping.transaction_attachments (bank_transaction_id);
CREATE INDEX idx_transaction_attachments_type ON finanzas_bookkeeping.transaction_attachments (attachment_type);

-- EXPENSE_DOCUMENTS
CREATE INDEX idx_expense_documents_contact_status ON finanzas_bookkeeping.expense_documents (contact_id, approval_status);
CREATE INDEX idx_expense_documents_org_date ON finanzas_bookkeeping.expense_documents (organization_id, expense_date);

-- PROJECT_FINANCIALS
CREATE INDEX idx_project_financials_project_date ON finanzas_bookkeeping.project_financials (customer_project_id, calculation_date);
```

Este script debería funcionar correctamente. Por favor, pruébalo y dime si necesitas algo más.

Claro, el nuevo error que estás viendo (`relation "base_foundation.customer_projects" does not exist`) es un problema de dependencia.

-----

### Causa del Error

El script de `finanzas_bookkeeping` que te proporcioné intenta crear relaciones de clave foránea con la tabla `customer_projects`, que se encuentra en el esquema `base_foundation`. Este error significa que el esquema `base_foundation` y sus tablas no existen en la base de datos cuando intentas ejecutar el script de `finanzas_bookkeeping`.

Para que el script funcione correctamente, primero debes crear el esquema `base_foundation` y todas sus tablas.

-----

### Solución

1.  **Ejecutar el Script de `base_foundation` primero:** Por favor, ejecuta el script de PostgreSQL que generamos para el esquema `base_foundation` en una conversación anterior. Esto creará la tabla `customer_projects` y otras tablas necesarias.

Aquí tienes el script completo de **`base_foundation`** para que lo tengas a mano:

```sql
-- PARTE 1: Creación del esquema y tablas con PKs y restricciones de columna
CREATE SCHEMA IF NOT EXISTS base_foundation;

-- TABLA 1: ORGANIZATIONS
CREATE TABLE base_foundation.organizations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    industry VARCHAR(100),
    website VARCHAR(255),
    logo_url VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 2: CONTACTS
CREATE TABLE base_foundation.contacts (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    full_name VARCHAR(201) GENERATED ALWAYS AS (first_name || ' ' || last_name) STORED,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    organization_id INT,
    job_title VARCHAR(100),
    contact_status VARCHAR(50) NOT NULL,
    lead_status VARCHAR(50),
    lead_source VARCHAR(50),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 3: USERS
CREATE TABLE base_foundation.users (
    id SERIAL PRIMARY KEY,
    contact_id INT UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255),
    last_login TIMESTAMP,
    login_attempts INT DEFAULT 0,
    is_locked BOOLEAN DEFAULT FALSE,
    is_super_admin BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 4: ROLES
CREATE TABLE base_foundation.roles (
    id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    is_system_role BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 5: USER_ROLES
CREATE TABLE base_foundation.user_roles (
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    assigned_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (user_id, role_id)
);

-- TABLA 6: PERMISSIONS
CREATE TABLE base_foundation.permissions (
    id SERIAL PRIMARY KEY,
    permission_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    module VARCHAR(50),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 7: ROLE_PERMISSIONS
CREATE TABLE base_foundation.role_permissions (
    role_id INT NOT NULL,
    permission_id INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    assigned_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (role_id, permission_id)
);

-- TABLA 8: ACCESS_LOGS
CREATE TABLE base_foundation.access_logs (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    login_at TIMESTAMP DEFAULT NOW(),
    logout_at TIMESTAMP,
    ip_address VARCHAR(45),
    user_agent TEXT,
    session_id VARCHAR(255) UNIQUE NOT NULL
);

-- TABLA 9: API_KEYS
CREATE TABLE base_foundation.api_keys (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    api_key VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(100),
    permissions_scope JSONB,
    expires_at TIMESTAMP,
    last_used_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 10: USER_AUTHENTICATION
CREATE TABLE base_foundation.user_authentication (
    user_id INT PRIMARY KEY,
    password_reset_token VARCHAR(255),
    password_reset_expires_at TIMESTAMP,
    verification_token VARCHAR(255),
    verification_expires_at TIMESTAMP,
    mfa_secret VARCHAR(255),
    mfa_enabled BOOLEAN DEFAULT FALSE
);

-- TABLA 11: USER_PREFERENCES
CREATE TABLE base_foundation.user_preferences (
    user_id INT PRIMARY KEY,
    theme VARCHAR(50) DEFAULT 'light',
    language VARCHAR(10) DEFAULT 'en',
    notifications_enabled BOOLEAN DEFAULT TRUE,
    notification_preferences JSONB,
    timezone VARCHAR(50) DEFAULT 'UTC',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 12: AUDIT_LOGS
CREATE TABLE base_foundation.audit_logs (
    id BIGSERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    entity_name VARCHAR(100) NOT NULL,
    entity_id INT NOT NULL,
    action_type VARCHAR(50) NOT NULL,
    action_details TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    changed_by_contact_id INT,
    changed_by_user_id INT,
    client_ip_address VARCHAR(45),
    user_agent TEXT,
    old_values JSONB,
    new_values JSONB,
    changed_fields JSONB,
    reason VARCHAR(255),
    session_id VARCHAR(255),
    request_id VARCHAR(100),
    transaction_id VARCHAR(100),
    severity_level VARCHAR(20) NOT NULL DEFAULT 'NORMAL',
    is_sensitive_data BOOLEAN DEFAULT FALSE,
    compliance_flags JSONB,
    retention_until DATE,
    additional_context JSONB
);

-- TABLA 13: LEAD_SOURCES
CREATE TABLE base_foundation.lead_sources (
    id SERIAL PRIMARY KEY,
    source_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE
);

-- TABLA 14: LEAD_STATUSES
CREATE TABLE base_foundation.lead_statuses (
    id SERIAL PRIMARY KEY,
    status_name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    status_order INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE
);

-- TABLA 15: CUSTOMER_PROJECTS
CREATE TABLE base_foundation.customer_projects (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    project_name VARCHAR(255) NOT NULL,
    project_description TEXT,
    project_status VARCHAR(50) NOT NULL,
    start_date DATE,
    end_date DATE,
    budget DECIMAL(12,2),
    actual_cost DECIMAL(12,2),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 16: PROJECT_MEMBERS
CREATE TABLE base_foundation.project_members (
    id SERIAL PRIMARY KEY,
    project_id INT NOT NULL,
    contact_id INT NOT NULL,
    role VARCHAR(50),
    is_active BOOLEAN DEFAULT TRUE,
    assigned_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE base_foundation.project_members ADD CONSTRAINT unique_project_contact UNIQUE (project_id, contact_id);

-- TABLA 17: EMPLOYEES
CREATE TABLE base_foundation.employees (
    id SERIAL PRIMARY KEY,
    contact_id INT UNIQUE NOT NULL,
    employee_id VARCHAR(50) UNIQUE NOT NULL,
    hire_date DATE,
    termination_date DATE,
    department VARCHAR(100),
    job_title VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 18: EMPLOYEE_PAYROLL
CREATE TABLE base_foundation.employee_payroll (
    id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    payroll_period_start DATE NOT NULL,
    payroll_period_end DATE NOT NULL,
    gross_pay DECIMAL(10,2),
    net_pay DECIMAL(10,2),
    pay_rate DECIMAL(10,2),
    pay_rate_type VARCHAR(20),
    status VARCHAR(20),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE base_foundation.employee_payroll ADD CONSTRAINT unique_employee_payroll_period UNIQUE (employee_id, payroll_period_start, payroll_period_end);

-- TABLA 19: INVOICES
CREATE TABLE base_foundation.invoices (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    customer_contact_id INT,
    customer_project_id INT,
    invoice_number VARCHAR(100) UNIQUE NOT NULL,
    issue_date DATE NOT NULL,
    due_date DATE,
    amount DECIMAL(12,2) NOT NULL,
    status VARCHAR(50) NOT NULL,
    paid_at TIMESTAMP,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 20: PROCESSED_PAYMENTS
CREATE TABLE base_foundation.processed_payments (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    invoice_id INT,
    payment_processor_id VARCHAR(100) UNIQUE,
    amount DECIMAL(12,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method VARCHAR(50),
    status VARCHAR(20) NOT NULL,
    transaction_fees DECIMAL(8,2),
    net_amount DECIMAL(12,2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);


-- PARTE 2: Definición de Claves Foráneas

-- CONTACTS
ALTER TABLE base_foundation.contacts ADD CONSTRAINT fk_contacts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.contacts ADD CONSTRAINT fk_contacts_lead_source FOREIGN KEY (lead_source) REFERENCES base_foundation.lead_sources(source_name);
ALTER TABLE base_foundation.contacts ADD CONSTRAINT fk_contacts_lead_status FOREIGN KEY (lead_status) REFERENCES base_foundation.lead_statuses(status_name);

-- USERS
ALTER TABLE base_foundation.users ADD CONSTRAINT fk_users_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);

-- USER_ROLES
ALTER TABLE base_foundation.user_roles ADD CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES base_foundation.users(id);
ALTER TABLE base_foundation.user_roles ADD CONSTRAINT fk_user_roles_role FOREIGN KEY (role_id) REFERENCES base_foundation.roles(id);

-- ROLE_PERMISSIONS
ALTER TABLE base_foundation.role_permissions ADD CONSTRAINT fk_role_permissions_role FOREIGN KEY (role_id) REFERENCES base_foundation.roles(id);
ALTER TABLE base_foundation.role_permissions ADD CONSTRAINT fk_role_permissions_permission FOREIGN KEY (permission_id) REFERENCES base_foundation.permissions(id);

-- ACCESS_LOGS
ALTER TABLE base_foundation.access_logs ADD CONSTRAINT fk_access_logs_user FOREIGN KEY (user_id) REFERENCES base_foundation.users(id);

-- API_KEYS
ALTER TABLE base_foundation.api_keys ADD CONSTRAINT fk_api_keys_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

-- USER_AUTHENTICATION
ALTER TABLE base_foundation.user_authentication ADD CONSTRAINT fk_user_auth_user FOREIGN KEY (user_id) REFERENCES base_foundation.users(id);

-- USER_PREFERENCES
ALTER TABLE base_foundation.user_preferences ADD CONSTRAINT fk_user_prefs_user FOREIGN KEY (user_id) REFERENCES base_foundation.users(id);

-- AUDIT_LOGS
ALTER TABLE base_foundation.audit_logs ADD CONSTRAINT fk_audit_logs_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.audit_logs ADD CONSTRAINT fk_audit_logs_contact FOREIGN KEY (changed_by_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE base_foundation.audit_logs ADD CONSTRAINT fk_audit_logs_user FOREIGN KEY (changed_by_user_id) REFERENCES base_foundation.users(id);

-- CUSTOMER_PROJECTS
ALTER TABLE base_foundation.customer_projects ADD CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

-- PROJECT_MEMBERS
ALTER TABLE base_foundation.project_members ADD CONSTRAINT fk_project_members_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE base_foundation.project_members ADD CONSTRAINT fk_project_members_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);

-- EMPLOYEES
ALTER TABLE base_foundation.employees ADD CONSTRAINT fk_employees_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);

-- EMPLOYEE_PAYROLL
ALTER TABLE base_foundation.employee_payroll ADD CONSTRAINT fk_employee_payroll_employee FOREIGN KEY (employee_id) REFERENCES base_foundation.employees(id);

-- INVOICES
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_customer_contact FOREIGN KEY (customer_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_customer_project FOREIGN KEY (customer_project_id) REFERENCES base_foundation.customer_projects(id);

-- PROCESSED_PAYMENTS
ALTER TABLE base_foundation.processed_payments ADD CONSTRAINT fk_processed_payments_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.processed_payments ADD CONSTRAINT fk_processed_payments_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);

-- PARTE 3: Creación de Índices para optimización de búsquedas

-- ORGANIZATIONS
CREATE INDEX idx_organizations_active ON base_foundation.organizations (is_active);

-- CONTACTS
CREATE INDEX idx_contacts_org_status ON base_foundation.contacts (organization_id, contact_status);
CREATE INDEX idx_contacts_lead_status ON base_foundation.contacts (lead_status);

-- USERS
CREATE INDEX idx_users_contact ON base_foundation.users (contact_id);
CREATE INDEX idx_users_active ON base_foundation.users (is_active);

-- ROLES
CREATE INDEX idx_roles_active ON base_foundation.roles (is_active);

-- USER_ROLES
CREATE INDEX idx_user_roles_user ON base_foundation.user_roles (user_id);
CREATE INDEX idx_user_roles_role ON base_foundation.user_roles (role_id);

-- PERMISSIONS
CREATE INDEX idx_permissions_module ON base_foundation.permissions (module);

-- ROLE_PERMISSIONS
CREATE INDEX idx_role_permissions_role ON base_foundation.role_permissions (role_id);
CREATE INDEX idx_role_permissions_permission ON base_foundation.role_permissions (permission_id);

-- ACCESS_LOGS
CREATE INDEX idx_access_logs_user_login ON base_foundation.access_logs (user_id, login_at);
CREATE INDEX idx_access_logs_session ON base_foundation.access_logs (session_id);

-- API_KEYS
CREATE INDEX idx_api_keys_org_active ON base_foundation.api_keys (organization_id, is_active);
CREATE INDEX idx_api_keys_expires_at ON base_foundation.api_keys (expires_at);

-- USER_AUTHENTICATION
CREATE INDEX idx_user_auth_reset_token ON base_foundation.user_authentication (password_reset_token);

-- USER_PREFERENCES
CREATE INDEX idx_user_prefs_language ON base_foundation.user_preferences (language);

-- AUDIT_LOGS
CREATE INDEX idx_audit_logs_org ON base_foundation.audit_logs (organization_id);
CREATE INDEX idx_audit_logs_entity ON base_foundation.audit_logs (entity_name, entity_id);
CREATE INDEX idx_audit_logs_action ON base_foundation.audit_logs (action_type);
CREATE INDEX idx_audit_logs_created_at ON base_foundation.audit_logs (created_at);

-- LEAD_SOURCES
CREATE INDEX idx_lead_sources_active ON base_foundation.lead_sources (is_active);

-- LEAD_STATUSES
CREATE INDEX idx_lead_statuses_order ON base_foundation.lead_statuses (status_order);

-- CUSTOMER_PROJECTS
CREATE INDEX idx_customer_projects_org_status ON base_foundation.customer_projects (organization_id, project_status);
CREATE INDEX idx_customer_projects_active ON base_foundation.customer_projects (is_active);

-- PROJECT_MEMBERS
CREATE INDEX idx_project_members_project ON base_foundation.project_members (project_id);
CREATE INDEX idx_project_members_contact ON base_foundation.project_members (contact_id);

-- EMPLOYEES
CREATE INDEX idx_employees_contact ON base_foundation.employees (contact_id);
CREATE INDEX idx_employees_active ON base_foundation.employees (is_active);
CREATE INDEX idx_employees_department ON base_foundation.employees (department);

-- EMPLOYEE_PAYROLL
CREATE INDEX idx_employee_payroll_employee ON base_foundation.employee_payroll (employee_id);
CREATE INDEX idx_employee_payroll_period ON base_foundation.employee_payroll (payroll_period_start, payroll_period_end);

-- INVOICES
CREATE INDEX idx_invoices_org_status ON base_foundation.invoices (organization_id, status);
CREATE INDEX idx_invoices_customer ON base_foundation.invoices (customer_contact_id);
CREATE INDEX idx_invoices_project ON base_foundation.invoices (customer_project_id);

-- PROCESSED_PAYMENTS
CREATE INDEX idx_processed_payments_org_date ON base_foundation.processed_payments (organization_id, payment_date);
CREATE INDEX idx_processed_payments_invoice ON base_foundation.processed_payments (invoice_id);
CREATE INDEX idx_processed_payments_processor ON base_foundation.processed_payments (payment_processor_id);
```

2.  **Volver a Ejecutar el Script de `finanzas_bookkeeping`:** Una vez que `base_foundation` se haya creado, ejecuta de nuevo el script de `finanzas_bookkeeping` que te proporcioné anteriormente.

Con estos pasos, el problema de dependencia debería resolverse. ¡Por favor, avísame si surge otro problema\!
Tienes toda la razón. Agradezco la aclaración. Aunque me has proporcionado el historial, no es posible que yo "sepa" el estado exacto de tu base de datos, así que incluir las dependencias críticas directamente en el script es la solución más robusta y eficaz.

He corregido el script DDL para que no dependa de que `base_foundation` ya esté completa. El nuevo script ahora crea las tablas del esquema `base_foundation` que son requeridas por `finanzas_bookkeeping` antes de crear las tablas de este último esquema. Esto debería resolver el error y permitir que el script se ejecute sin fallos.

-----

### Script de PostgreSQL (Combinado y Corregido)

He aquí el script completo y auto-contenido que crea ambos esquemas y todas las tablas necesarias en el orden correcto.

```sql
-- Script DDL Combinado: base_foundation (partes esenciales) y finanzas_bookkeeping

-- PARTE 1: Creación del esquema y tablas esenciales de base_foundation
-- Estas tablas son requeridas por el esquema de finanzas_bookkeeping,
-- por lo que se crean aquí para evitar errores de dependencia.

CREATE SCHEMA IF NOT EXISTS base_foundation;

-- TABLA: ORGANIZATIONS
CREATE TABLE base_foundation.organizations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    industry VARCHAR(100),
    website VARCHAR(255),
    logo_url VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA: CONTACTS
CREATE TABLE base_foundation.contacts (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    full_name VARCHAR(201) GENERATED ALWAYS AS (first_name || ' ' || last_name) STORED,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    organization_id INT,
    job_title VARCHAR(100),
    contact_status VARCHAR(50) NOT NULL,
    lead_status VARCHAR(50),
    lead_source VARCHAR(50),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA: CUSTOMER_PROJECTS (La tabla que faltaba)
CREATE TABLE base_foundation.customer_projects (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    project_name VARCHAR(255) NOT NULL,
    project_description TEXT,
    project_status VARCHAR(50) NOT NULL,
    start_date DATE,
    end_date DATE,
    budget DECIMAL(12,2),
    actual_cost DECIMAL(12,2),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA: INVOICES
CREATE TABLE base_foundation.invoices (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    customer_contact_id INT,
    customer_project_id INT,
    invoice_number VARCHAR(100) UNIQUE NOT NULL,
    issue_date DATE NOT NULL,
    due_date DATE,
    amount DECIMAL(12,2) NOT NULL,
    status VARCHAR(50) NOT NULL,
    paid_at TIMESTAMP,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA: PROCESSED_PAYMENTS
CREATE TABLE base_foundation.processed_payments (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    invoice_id INT,
    payment_processor_id VARCHAR(100) UNIQUE,
    amount DECIMAL(12,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method VARCHAR(50),
    status VARCHAR(20) NOT NULL,
    transaction_fees DECIMAL(8,2),
    net_amount DECIMAL(12,2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Claves foráneas para las tablas de base_foundation
ALTER TABLE base_foundation.contacts ADD CONSTRAINT fk_contacts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.customer_projects ADD CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_customer_contact FOREIGN KEY (customer_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE base_foundation.invoices ADD CONSTRAINT fk_invoices_customer_project FOREIGN KEY (customer_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE base_foundation.processed_payments ADD CONSTRAINT fk_processed_payments_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE base_foundation.processed_payments ADD CONSTRAINT fk_processed_payments_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);

-- ---
-- PARTE 2: Creación del esquema y tablas de finanzas_bookkeeping
-- Este es el script corregido que incluye las tablas de base_foundation
-- en su primera sección para evitar errores de dependencia.

CREATE SCHEMA IF NOT EXISTS finanzas_bookkeeping;

-- TABLA 106: BANK_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.bank_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    account_type VARCHAR(30) NOT NULL,
    bank_name VARCHAR(100),
    account_number VARCHAR(50),
    routing_number VARCHAR(20),
    plaid_account_id VARCHAR(100) UNIQUE,
    plaid_access_token VARCHAR(255),
    current_balance DECIMAL(12,2),
    available_balance DECIMAL(12,2),
    last_sync_date TIMESTAMP,
    auto_sync_enabled BOOLEAN DEFAULT TRUE,
    is_primary BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Restricción única compuesta
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT unique_organization_account_number UNIQUE (organization_id, account_number);

-- TABLA 107: BANK_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.bank_transactions (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    plaid_transaction_id VARCHAR(100) UNIQUE,
    transaction_date DATE NOT NULL,
    post_date DATE,
    amount DECIMAL(12,2) NOT NULL,
    description VARCHAR(300),
    merchant_name VARCHAR(100),
    category_primary VARCHAR(50),
    category_detailed VARCHAR(100),
    account_owner VARCHAR(100),
    pending BOOLEAN DEFAULT FALSE,
    check_number VARCHAR(20),
    irs_category_id INT,
    ai_categorized BOOLEAN DEFAULT FALSE,
    categorization_confidence DECIMAL(5,2),
    wallet_id INT,
    project_id INT,
    reconciled BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 108: TRANSACTION_SPLITS
CREATE TABLE finanzas_bookkeeping.transaction_splits (
    id SERIAL PRIMARY KEY,
    parent_transaction_id INT NOT NULL,
    split_amount DECIMAL(12,2) NOT NULL,
    split_description VARCHAR(300),
    irs_category_id INT,
    assigned_to_contact_id INT,
    assigned_to_project_id INT,
    wallet_id INT,
    split_percentage DECIMAL(5,2),
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT check_split_percentage CHECK (split_percentage BETWEEN 0 AND 100)
);

-- TABLA 109: CASH_ACCOUNTS
CREATE TABLE finanzas_bookkeeping.cash_accounts (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    account_name VARCHAR(100),
    current_balance DECIMAL(10,2),
    location VARCHAR(100),
    responsible_contact_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT unique_org_account_name UNIQUE (organization_id, account_name);

-- TABLA 110: CHECK_REGISTER
CREATE TABLE finanzas_bookkeeping.check_register (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    check_number VARCHAR(20),
    payee_name VARCHAR(100),
    payee_contact_id INT,
    amount DECIMAL(10,2),
    memo VARCHAR(200),
    issue_date DATE,
    cleared_date DATE,
    status VARCHAR(20) NOT NULL,
    wallet_id INT,
    related_invoice_id INT,
    issued_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT unique_account_check_number UNIQUE (bank_account_id, check_number);

-- TABLA 111: IRS_CATEGORIES
CREATE TABLE finanzas_bookkeeping.irs_categories (
    id SERIAL PRIMARY KEY,
    category_code VARCHAR(20) UNIQUE,
    category_name VARCHAR(100),
    irs_form_line VARCHAR(50),
    description TEXT,
    is_deductible BOOLEAN DEFAULT TRUE,
    requires_documentation BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 112: TRANSACTION_CATEGORIES
CREATE TABLE finanzas_bookkeeping.transaction_categories (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    category_name VARCHAR(100),
    parent_category_id INT,
    irs_category_id INT,
    icon_name VARCHAR(50),
    color VARCHAR(7),
    is_expense BOOLEAN DEFAULT TRUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT unique_org_category_name UNIQUE (organization_id, category_name);

-- TABLA 113: UNCATEGORIZED_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.uncategorized_transactions (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT UNIQUE,
    suggested_category_id INT,
    confidence_score DECIMAL(5,2),
    requires_attention BOOLEAN DEFAULT TRUE,
    reviewed_by_contact_id INT,
    reviewed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 114: AI_CATEGORIZATION_LOG
CREATE TABLE finanzas_bookkeeping.ai_categorization_log (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT,
    ai_model_version VARCHAR(50),
    prediction_confidence DECIMAL(5,2),
    predicted_category_id INT,
    actual_category_id INT,
    prediction_correct BOOLEAN,
    features_used JSON,
    processing_time_ms INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 115: WALLET_TYPES
CREATE TABLE finanzas_bookkeeping.wallet_types (
    id SERIAL PRIMARY KEY,
    type_name VARCHAR(50) UNIQUE,
    description TEXT,
    default_rules JSON,
    icon_name VARCHAR(50),
    is_system_type BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 116: VIRTUAL_WALLETS
CREATE TABLE finanzas_bookkeeping.virtual_wallets (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    wallet_type_id INT,
    wallet_name VARCHAR(100),
    description TEXT,
    current_balance DECIMAL(12,2),
    allocated_budget DECIMAL(12,2),
    responsible_contact_id INT,
    project_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    auto_allocate_rules JSON,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT unique_org_wallet_name UNIQUE (organization_id, wallet_name);

-- TABLA 117: WALLET_TRANSACTIONS
CREATE TABLE finanzas_bookkeeping.wallet_transactions (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    bank_transaction_id INT,
    amount DECIMAL(12,2) NOT NULL,
    transaction_type VARCHAR(20) NOT NULL,
    description VARCHAR(300),
    reference_type VARCHAR(30),
    reference_id INT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 118: WALLET_BALANCES
CREATE TABLE finanzas_bookkeeping.wallet_balances (
    id SERIAL PRIMARY KEY,
    wallet_id INT NOT NULL,
    balance_date DATE NOT NULL,
    opening_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    transaction_count INT,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT unique_wallet_date UNIQUE (wallet_id, balance_date);

-- TABLA 119: INVOICE_PAYMENTS
CREATE TABLE finanzas_bookkeeping.invoice_payments (
    id SERIAL PRIMARY KEY,
    invoice_id INT,
    payment_amount DECIMAL(12,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method VARCHAR(30) NOT NULL,
    payment_reference VARCHAR(100),
    bank_account_id INT,
    processed_payment_id INT,
    payment_processor_fee DECIMAL(8,2),
    net_payment_amount DECIMAL(12,2),
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 120: PAYMENT_ALLOCATIONS
CREATE TABLE finanzas_bookkeeping.payment_allocations (
    id SERIAL PRIMARY KEY,
    invoice_payment_id INT NOT NULL,
    bank_transaction_id INT,
    allocated_amount DECIMAL(12,2) NOT NULL,
    allocation_notes TEXT,
    created_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 121: PAYMENT_REVERSALS
CREATE TABLE finanzas_bookkeeping.payment_reversals (
    id SERIAL PRIMARY KEY,
    original_payment_id INT NOT NULL,
    reversal_amount DECIMAL(12,2) NOT NULL,
    reversal_date DATE NOT NULL,
    reversal_reason VARCHAR(100),
    reversal_transaction_id INT,
    notes TEXT,
    processed_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 122: COMMISSION_CALCULATIONS
CREATE TABLE finanzas_bookkeeping.commission_calculations (
    id SERIAL PRIMARY KEY,
    invoice_id INT NOT NULL,
    salesperson_contact_id INT NOT NULL,
    commission_percentage DECIMAL(5,2),
    commission_amount DECIMAL(10,2),
    calculation_base DECIMAL(12,2),
    payment_status VARCHAR(20) NOT NULL,
    wallet_id INT,
    paid_via_check_id INT,
    calculated_at TIMESTAMP,
    paid_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT unique_invoice_salesperson UNIQUE (invoice_id, salesperson_contact_id);

-- TABLA 123: BANK_STATEMENTS
CREATE TABLE finanzas_bookkeeping.bank_statements (
    id SERIAL PRIMARY KEY,
    bank_account_id INT NOT NULL,
    statement_month INT NOT NULL,
    statement_year INT NOT NULL,
    statement_start_date DATE,
    statement_end_date DATE,
    opening_balance DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    total_credits DECIMAL(12,2),
    statement_file_url VARCHAR(300),
    upload_date TIMESTAMP,
    reconciled BOOLEAN DEFAULT FALSE,
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT unique_account_month_year UNIQUE (bank_account_id, statement_month, statement_year);

-- TABLA 124: TRANSACTION_ATTACHMENTS
CREATE TABLE finanzas_bookkeeping.transaction_attachments (
    id SERIAL PRIMARY KEY,
    bank_transaction_id INT NOT NULL,
    attachment_type VARCHAR(30) NOT NULL,
    file_name VARCHAR(255),
    file_url VARCHAR(300),
    file_size INT,
    mime_type VARCHAR(100),
    description VARCHAR(300),
    extracted_text TEXT,
    extraction_confidence DECIMAL(5,2),
    uploaded_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 125: EXPENSE_DOCUMENTS
CREATE TABLE finanzas_bookkeeping.expense_documents (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    contact_id INT NOT NULL,
    expense_category_id INT,
    expense_amount DECIMAL(10,2) NOT NULL,
    expense_date DATE NOT NULL,
    vendor_name VARCHAR(100),
    description VARCHAR(300),
    document_type VARCHAR(30) NOT NULL,
    file_url VARCHAR(300),
    ocr_extracted_data JSON,
    approval_status VARCHAR(20) NOT NULL,
    approved_by_contact_id INT,
    approved_at TIMESTAMP,
    reimbursement_status VARCHAR(20) NOT NULL,
    bank_transaction_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- TABLA 126: PROJECT_FINANCIALS
CREATE TABLE finanzas_bookkeeping.project_financials (
    id SERIAL PRIMARY KEY,
    customer_project_id INT NOT NULL,
    calculation_date DATE NOT NULL,
    total_invoiced DECIMAL(12,2),
    total_received DECIMAL(12,2),
    outstanding_receivables DECIMAL(12,2),
    direct_labor_cost DECIMAL(12,2),
    materials_cost DECIMAL(12,2),
    equipment_cost DECIMAL(12,2),
    subcontractor_cost DECIMAL(12,2),
    other_expenses DECIMAL(12,2),
    total_expenses DECIMAL(12,2),
    gross_profit DECIMAL(12,2),
    profit_margin_percentage DECIMAL(5,2),
    total_commissions DECIMAL(10,2),
    last_calculated_at TIMESTAMP,
    calculated_by_contact_id INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT unique_project_date UNIQUE (customer_project_id, calculation_date);

-- PARTE 3: Definición de Claves Foráneas para finanzas_bookkeeping

-- BANK_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.bank_accounts ADD CONSTRAINT fk_bank_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);

-- BANK_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.bank_transactions ADD CONSTRAINT fk_bank_transactions_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- TRANSACTION_SPLITS
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_bank_transaction FOREIGN KEY (parent_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_assigned_contact FOREIGN KEY (assigned_to_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_project FOREIGN KEY (assigned_to_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.transaction_splits ADD CONSTRAINT fk_transaction_splits_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- CASH_ACCOUNTS
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.cash_accounts ADD CONSTRAINT fk_cash_accounts_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);

-- CHECK_REGISTER
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_payee_contact FOREIGN KEY (payee_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_related_invoice FOREIGN KEY (related_invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.check_register ADD CONSTRAINT fk_check_register_issued_by FOREIGN KEY (issued_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_CATEGORIES
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_parent FOREIGN KEY (parent_category_id) REFERENCES finanzas_bookkeeping.transaction_categories(id);
ALTER TABLE finanzas_bookkeeping.transaction_categories ADD CONSTRAINT fk_transaction_categories_irs_category FOREIGN KEY (irs_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- UNCATEGORIZED_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_suggested_category FOREIGN KEY (suggested_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.uncategorized_transactions ADD CONSTRAINT fk_uncat_transactions_reviewed_by FOREIGN KEY (reviewed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- AI_CATEGORIZATION_LOG
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_predicted_category FOREIGN KEY (predicted_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.ai_categorization_log ADD CONSTRAINT fk_ai_log_actual_category FOREIGN KEY (actual_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);

-- VIRTUAL_WALLETS
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_wallet_type FOREIGN KEY (wallet_type_id) REFERENCES finanzas_bookkeeping.wallet_types(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_responsible_contact FOREIGN KEY (responsible_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.virtual_wallets ADD CONSTRAINT fk_virtual_wallets_project FOREIGN KEY (project_id) REFERENCES base_foundation.customer_projects(id);

-- WALLET_TRANSACTIONS
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.wallet_transactions ADD CONSTRAINT fk_wallet_transactions_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- WALLET_BALANCES
ALTER TABLE finanzas_bookkeeping.wallet_balances ADD CONSTRAINT fk_wallet_balances_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);

-- INVOICE_PAYMENTS
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_payment FOREIGN KEY (processed_payment_id) REFERENCES base_foundation.processed_payments(id);
ALTER TABLE finanzas_bookkeeping.invoice_payments ADD CONSTRAINT fk_invoice_payments_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_ALLOCATIONS
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_invoice_payment FOREIGN KEY (invoice_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_allocations ADD CONSTRAINT fk_payment_allocations_created_by FOREIGN KEY (created_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PAYMENT_REVERSALS
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_original_payment FOREIGN KEY (original_payment_id) REFERENCES finanzas_bookkeeping.invoice_payments(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_bank_transaction FOREIGN KEY (reversal_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.payment_reversals ADD CONSTRAINT fk_payment_reversals_processed_by FOREIGN KEY (processed_by_contact_id) REFERENCES base_foundation.contacts(id);

-- COMMISSION_CALCULATIONS
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_invoice FOREIGN KEY (invoice_id) REFERENCES base_foundation.invoices(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_salesperson FOREIGN KEY (salesperson_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_virtual_wallet FOREIGN KEY (wallet_id) REFERENCES finanzas_bookkeeping.virtual_wallets(id);
ALTER TABLE finanzas_bookkeeping.commission_calculations ADD CONSTRAINT fk_commission_calculations_check_register FOREIGN KEY (paid_via_check_id) REFERENCES finanzas_bookkeeping.check_register(id);

-- BANK_STATEMENTS
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_bank_account FOREIGN KEY (bank_account_id) REFERENCES finanzas_bookkeeping.bank_accounts(id);
ALTER TABLE finanzas_bookkeeping.bank_statements ADD CONSTRAINT fk_bank_statements_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- TRANSACTION_ATTACHMENTS
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);
ALTER TABLE finanzas_bookkeeping.transaction_attachments ADD CONSTRAINT fk_transaction_attachments_uploaded_by FOREIGN KEY (uploaded_by_contact_id) REFERENCES base_foundation.contacts(id);

-- EXPENSE_DOCUMENTS
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_organization FOREIGN KEY (organization_id) REFERENCES base_foundation.organizations(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_contact FOREIGN KEY (contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_irs_category FOREIGN KEY (expense_category_id) REFERENCES finanzas_bookkeeping.irs_categories(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_approved_by FOREIGN KEY (approved_by_contact_id) REFERENCES base_foundation.contacts(id);
ALTER TABLE finanzas_bookkeeping.expense_documents ADD CONSTRAINT fk_expense_documents_bank_transaction FOREIGN KEY (bank_transaction_id) REFERENCES finanzas_bookkeeping.bank_transactions(id);

-- PROJECT_FINANCIALS
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_project FOREIGN KEY (customer_project_id) REFERENCES base_foundation.customer_projects(id);
ALTER TABLE finanzas_bookkeeping.project_financials ADD CONSTRAINT fk_project_financials_calculated_by FOREIGN KEY (calculated_by_contact_id) REFERENCES base_foundation.contacts(id);

-- PARTE 4: Creación de Índices para optimización de búsquedas

-- Índices de finanzas_bookkeeping
CREATE INDEX idx_bank_accounts_org_active ON finanzas_bookkeeping.bank_accounts (organization_id, is_active);
CREATE INDEX idx_bank_accounts_plaid ON finanzas_bookkeeping.bank_accounts (plaid_account_id);
CREATE INDEX idx_bank_transactions_account_date ON finanzas_bookkeeping.bank_transactions (bank_account_id, transaction_date);
CREATE INDEX idx_bank_transactions_reconciled ON finanzas_bookkeeping.bank_transactions (reconciled, transaction_date);
CREATE INDEX idx_bank_transactions_plaid ON finanzas_bookkeeping.bank_transactions (plaid_transaction_id);
CREATE UNIQUE INDEX idx_unique_bank_check ON finanzas_bookkeeping.bank_transactions (bank_account_id, check_number) WHERE check_number IS NOT NULL;
CREATE INDEX idx_transaction_splits_parent ON finanzas_bookkeeping.transaction_splits (parent_transaction_id);
CREATE INDEX idx_transaction_splits_project ON finanzas_bookkeeping.transaction_splits (assigned_to_project_id);
CREATE INDEX idx_cash_accounts_org_active ON finanzas_bookkeeping.cash_accounts (organization_id, is_active);
CREATE INDEX idx_check_register_account_status ON finanzas_bookkeeping.check_register (bank_account_id, status);
CREATE INDEX idx_check_register_payee ON finanzas_bookkeeping.check_register (payee_contact_id);
CREATE INDEX idx_irs_categories_active ON finanzas_bookkeeping.irs_categories (is_active);
CREATE INDEX idx_irs_categories_deductible ON finanzas_bookkeeping.irs_categories (is_deductible);
CREATE INDEX idx_transaction_categories_org_active ON finanzas_bookkeeping.transaction_categories (organization_id, is_active);
CREATE INDEX idx_transaction_categories_parent ON finanzas_bookkeeping.transaction_categories (parent_category_id);
CREATE INDEX idx_uncategorized_requires_attention ON finanzas_bookkeeping.uncategorized_transactions (requires_attention);
CREATE INDEX idx_uncategorized_confidence ON finanzas_bookkeeping.uncategorized_transactions (confidence_score);
CREATE INDEX idx_ai_categorization_accuracy ON finanzas_bookkeeping.ai_categorization_log (prediction_correct, created_at);
CREATE INDEX idx_ai_categorization_model ON finanzas_bookkeeping.ai_categorization_log (ai_model_version);
CREATE INDEX idx_wallet_types_active ON finanzas_bookkeeping.wallet_types (is_active);
CREATE INDEX idx_virtual_wallets_org_active ON finanzas_bookkeeping.virtual_wallets (organization_id, is_active);
CREATE INDEX idx_virtual_wallets_project ON finanzas_bookkeeping.virtual_wallets (project_id);
CREATE INDEX idx_wallet_transactions_wallet_date ON finanzas_bookkeeping.wallet_transactions (wallet_id, created_at);
CREATE INDEX idx_wallet_transactions_reference ON finanzas_bookkeeping.wallet_transactions (reference_type, reference_id);
CREATE INDEX idx_wallet_balances_wallet_date ON finanzas_bookkeeping.wallet_balances (wallet_id, balance_date);
CREATE INDEX idx_invoice_payments_invoice ON finanzas_bookkeeping.invoice_payments (invoice_id);
CREATE INDEX idx_invoice_payments_date ON finanzas_bookkeeping.invoice_payments (payment_date);
CREATE INDEX idx_payment_allocations_payment ON finanzas_bookkeeping.payment_allocations (invoice_payment_id);
CREATE INDEX idx_payment_allocations_transaction ON finanzas_bookkeeping.payment_allocations (bank_transaction_id);
CREATE INDEX idx_payment_reversals_original ON finanzas_bookkeeping.payment_reversals (original_payment_id);
CREATE INDEX idx_payment_reversals_reason ON finanzas_bookkeeping.payment_reversals (reversal_reason);
CREATE INDEX idx_commission_calculations_salesperson ON finanzas_bookkeeping.commission_calculations (salesperson_contact_id);
CREATE INDEX idx_commission_calculations_status ON finanzas_bookkeeping.commission_calculations (payment_status);
CREATE INDEX idx_bank_statements_account_period ON finanzas_bookkeeping.bank_statements (bank_account_id, statement_year, statement_month);
CREATE INDEX idx_bank_statements_reconciled ON finanzas_bookkeeping.bank_statements (reconciled);
CREATE INDEX idx_transaction_attachments_transaction ON finanzas_bookkeeping.transaction_attachments (bank_transaction_id);
CREATE INDEX idx_transaction_attachments_type ON finanzas_bookkeeping.transaction_attachments (attachment_type);
CREATE INDEX idx_expense_documents_contact_status ON finanzas_bookkeeping.expense_documents (contact_id, approval_status);
CREATE INDEX idx_expense_documents_org_date ON finanzas_bookkeeping.expense_documents (organization_id, expense_date);
CREATE INDEX idx_project_financials_project_date ON finanzas_bookkeeping.project_financials (customer_project_id, calculation_date);

-- Índices de las tablas de base_foundation
CREATE INDEX idx_organizations_active ON base_foundation.organizations (is_active);
CREATE INDEX idx_contacts_org_status ON base_foundation.contacts (organization_id, contact_status);
CREATE INDEX idx_projects_org_status ON base_foundation.customer_projects (organization_id, project_status);
CREATE INDEX idx_invoices_org_status ON base_foundation.invoices (organization_id, status);
CREATE INDEX idx_invoices_customer ON base_foundation.invoices (customer_contact_id);
CREATE INDEX idx_invoices_project ON base_foundation.invoices (customer_project_id);
CREATE INDEX idx_processed_payments_org_date ON base_foundation.processed_payments (organization_id, payment_date);
CREATE INDEX idx_processed_payments_invoice ON base_foundation.processed_payments (invoice_id);
```

eof

